"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('@angular/core');
var step_service_1 = require("../Engine/step.service");
var router_1 = require('@angular/router');
var gridPanel_service_1 = require("../components/gridPanel.service");
var MenuComponent = (function () {
    function MenuComponent(_stepService, router, _gridService, route) {
        this._stepService = _stepService;
        this.router = router;
        this._gridService = _gridService;
        this.route = route;
        this.grids = [];
        this.ready = false;
        this.appName = '';
        this.preMenu = 0;
        this.backBtn = false;
        this.preMenuLst = [];
        this.level2 = false;
        this.val_level2 = '';
    }
    MenuComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.appName = this.route.snapshot.queryParams["app"];
        if (this._stepService.steps[0].master_type == 'form') {
            this.router.navigate(['/step']);
        }
        else {
            this._gridService.getActivatedGrids()
                .then(function (gridsList) {
                console.log(gridsList);
                _this.grids = gridsList;
                for (var j = 0; j < _this.grids.length; j++) {
                    console.log(_this.grids[j].name);
                    console.log(_this.grids[j].listBtn);
                    if (typeof _this.grids[j].listBtn != 'undefined') {
                        _this.preMenu = 1;
                        _this.preMenuLst = _this.grids[j].listBtn;
                        console.log(_this.grids[j].listBtn);
                    }
                }
                _this.ready = true;
            }), function (error) { return console.log(error); };
        }
    };
    MenuComponent.prototype.getGridsBtn = function ($event, val) {
        var gridList = $event.target.value;
        this.val_level2 = val;
        console.log(gridList);
        console.log(val);
        for (var idxGrid in this.grids) {
            if (typeof this.grids[idxGrid].listBtn != 'undefined') {
                {
                    for (var i in this.grids[idxGrid].listBtn) {
                        if (this.grids[idxGrid].listBtn[i].value == val) {
                            console.log(this.grids[idxGrid].listBtn[i]);
                            console.log(this.grids[idxGrid].listBtn[i].value);
                            console.log(this.grids[idxGrid].listBtn[i].children);
                            for (var j in this.grids) {
                                console.log(this.grids[j].name);
                                console.log(this.grids[idxGrid].listBtn[i].children);
                                console.log("xxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
                                if (this.grids[idxGrid].listBtn[i].children.indexOf(this.grids[j].name) > -1) {
                                    this.grids[j].display = true;
                                }
                                else {
                                    this.grids[j].display = false;
                                }
                            }
                            console.log(this.grids);
                        }
                    }
                }
            }
        }
        this.preMenu = 2;
        this.backBtn = true;
        this.level2 = true;
    };
    MenuComponent.prototype.onClick = function () {
        this.preMenu = 1;
        this.backBtn = false;
    };
    MenuComponent = __decorate([
        core_1.Component({
            selector: 'grid-panel',
            template: "\n\n    \n        <div *ngIf=\"backBtn\" align=\"left\">\n            <nav class=\"form-navArrow\">\n                \n                \n                <button (click)=\"onClick()\" class=\"tg-bn4o\" ><i class=\"glyphicon glyphicon-triangle-left\" > BACK </i></button>\n            </nav>\n        </div>\n\n    <div class=\"panel-body\" *ngIf=\"ready == true\">\n\n        \n            <div *ngIf=\"preMenu == 1\"> \n                <!--steps from admin_ballet-->\n                    <!--step 1 { type : buttons } pass stage_name to step 2-->\n                    <!--step 2 {type: grids} get all grids from stage_name-->\n                <!--steps from grids-->\n                \n                 <div *ngFor=\"let btn of preMenuLst\" class=\"col-md-3\">\n                    <button class=\"btn btn-primary btn-lg\" type=\"button\" \n                        (click)=\"getGridsBtn($event, btn.value)\"\n                        value=\"{{btn.children}}\">{{btn.value}}\n                    </button>\n                </div>\n            \n            \n            </div>\n            \n            <div *ngIf=\"preMenu == 2\"> \n                \n                 <div><h1>{{val_level2}}</h1></div>\n                <div *ngFor=\"let grid of grids\" >\n                   \n                    <!--<button class=\"btn btn-success\" type=\"button\" (click)=\"showGrid(grid.name)\" value=\"{{grid.name}} \">{{grid.name}} -->\n                    <!--</button>-->\n                    <div *ngIf=\"grid.display\">\n                        \n                            <a [routerLink]=\"['/grid']\" replaceUrl=\"True\" [queryParams]=\"{'grid_name': grid.name, 'master_val': val_level2}\">\n                                <button type=\"button\" class=\"btn btn-primary btn-lg\" > {{grid.name}}</button> \n                            </a>\n                                \n                    </div>\n                </div>\n            </div>\n            \n            \n           <div  *ngIf=\"preMenu == 0\"> \n                <div *ngFor=\"let grid of grids\" class=\"col-md-3\">\n                    <!--<button class=\"btn btn-success\" type=\"button\" (click)=\"showGrid(grid.name)\" value=\"{{grid.name}} \">{{grid.name}} -->\n                    <!--</button>-->\n                    <span *ngIf=\"grid.display\">\n                        <button type=\"button\" class=\"btn btn-primary btn-lg\" >\n                            <a [routerLink]=\"['/grid']\" [queryParams]=\"{'grid_name': grid.name}\">{{grid.name}} </a>\n                        </button>\n                    </span>\n                </div>\n            </div>\n            <!--<div class=\"col-md-3\"><button type=\"button\" class=\"btn btn-success\"><a [routerLink]=\"['/step']\"> Nouveau flow</a></button></div>-->\n\n    </div>\n" }), 
        __metadata('design:paramtypes', [step_service_1.StepService, (typeof (_a = typeof router_1.Router !== 'undefined' && router_1.Router) === 'function' && _a) || Object, gridPanel_service_1.GridPanelService, (typeof (_b = typeof router_1.ActivatedRoute !== 'undefined' && router_1.ActivatedRoute) === 'function' && _b) || Object])
    ], MenuComponent);
    return MenuComponent;
    var _a, _b;
}());
exports.MenuComponent = MenuComponent;

//# sourceMappingURL=data:application/json;base64,
