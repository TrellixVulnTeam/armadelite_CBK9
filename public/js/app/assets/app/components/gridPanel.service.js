"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
const core_1 = require("@angular/core");
const global_1 = require("../global");
const http_1 = require("@angular/http");
const Observable_1 = require("rxjs/Observable");
let GridPanelService = class GridPanelService {
    constructor(_http) {
        this._http = _http;
        this.dataGrid = [];
        this.keysName = [];
        this.colTitle = [];
        this.originalData = this.dataGrid;
    }
    getDatas(grid_name) {
        this.dataGrid = [];
        this.keysName = [];
        this.colTitle = [];
        let query = "grid_name=" + grid_name;
        let headers = new http_1.Headers({ 'Content-Type': 'application/json' });
        let options = new http_1.RequestOptions({ headers: headers });
        var completeUrl = global_1.GlobalVariable.BASE_URL + 'data_grid?' + query;
        return this._http.get(completeUrl)
            .map(response => {
            console.log(response);
            let data = response.json();
            console.log(data);
            for (var i in data[0].config) {
                // if (key != '_id' && key != 'step_id'){
                console.log(data[0].config[i]);
                // console.lota[0].config[i] === "object"){
                var result = "";
                if (typeof data[0].config[i].field_panel_name != 'undefined') {
                    //var j = 0;
                    for (var q in data[0].config[i].field_panel_values) {
                        // console.log(p)
                        // console.log(q);
                        // result += p + " , " + data[0].colNames[i][p] + "\n";
                        // console.log(p+"_"+data[0].colNames[i][p][j])
                        // this.keysName.push(p+"_"+data[0].colNames[i][p][j]);
                        this.keysName.push(data[0].config[i].field_panel_name + '_' + data[0].config[i].field_panel_values[q].data);
                        this.colTitle.push({ "title": data[0].config[i].field_panel_values[q].title, "key": data[0].config[i].field_panel_name + '_' + data[0].config[i].field_panel_values[q].data, "type": "field_panel" });
                    }
                }
                else if (typeof data[0].config[i].type != 'undefined') {
                    switch (data[0].config[i].type) {
                        case 'checkbox':
                            {
                                this.keysName.push(data[0].config[i].data);
                                this.colTitle.push({ "title": data[0].config[i].title, "key": data[0].config[i].data, "type": "checkbox" });
                            }
                            break;
                    }
                }
                else {
                    this.keysName.push(data[0].config[i].data);
                    this.colTitle.push({ "title": data[0].config[i].title, "key": data[0].config[i].data, "type": "value" });
                }
            }
            data.shift();
            console.log(this.keysName);
            console.log(this.colTitle);
            this.dataGrid = data;
            this.originalData = this.dataGrid;
            return 'ok';
        })
            .catch(error => Observable_1.Observable.throw(error));
    }
    updateCheckBox(val) {
    }
    getActivatedGrids() {
        // let query = "master="+master_name;
        let headers = new http_1.Headers({ 'Content-Type': 'application/json' });
        let options = new http_1.RequestOptions({ headers: headers });
        var completeUrl = global_1.GlobalVariable.BASE_URL + 'get_grids';
        return this._http.get(completeUrl)
            .toPromise().then(response => response.json())
            .catch(error => Observable_1.Observable.throw(error));
    }
    filterParNom(obj, arg) {
        console.log(obj);
        console.log(arg);
        console.log(this);
        let key = this.key;
        let value = this.value;
        console.log(key);
        console.log(value);
        console.log(obj[key]);
        // var res = value.match(/obj[key]/g);
        if (value.indexOf(obj[key]) >= 0) {
            return true;
        }
        else {
            return false;
        }
        //console.log(res);
        // if (res != null)
        // {
        //
        // // }
        // // if (obj[key] === value) {
        //      return true;
        //
        // } else {
        //     return false
        // }
    }
    filterData(value, key) {
        console.log(value);
        //this.originalData = this.dataGrid;
        if (value == '') {
            this.dataGrid = this.originalData;
        }
        else {
            let result = this.dataGrid.filter(this.filterParNom, { "key": key, "value": value });
            console.log(result);
            if (result.length > 0) {
                this.dataGrid = result;
            }
            else {
                this.dataGrid = this.originalData;
            }
        }
        //console.log(arrByNom);
    }
    updateCheckbox(value, _id) {
        // console.log('saveDemande');
        // console.log(form );
        //this._formService.arraySteps.push({"step_id": currentStep});
        let body = JSON.stringify({ "value": value, "_id": _id });
        //
        // console.log("body");
        // console.log(body);
        const headers = new http_1.Headers({ 'Content-Type': 'application/json' });
        // return this._http.post('http://localhost:3000/demand', body, {headers: headers})
        var completeUrl = global_1.GlobalVariable.BASE_URL + 'update_checkbox';
        return this._http.post(completeUrl, body, { headers: headers })
            .map(response => response)
            .catch(error => Observable_1.Observable.throw(error.json()));
    }
};
GridPanelService = __decorate([
    core_1.Injectable(), 
    __metadata('design:paramtypes', [http_1.Http])
], GridPanelService);
exports.GridPanelService = GridPanelService;

//# sourceMappingURL=data:application/json;base64,
