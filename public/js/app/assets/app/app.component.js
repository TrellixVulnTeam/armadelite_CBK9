"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
const core_1 = require('@angular/core');
const form_service_1 = require("./components/form.service");
let AppComponent = class AppComponent {
    constructor(_formService /*,
        private _stepService: StepService*/) {
        this._formService = _formService;
        this.lists = [];
        this.listsData = [];
        this.tmp = [];
    }
    ngOnInit() {
        this._formService.init();
    }
};
AppComponent = __decorate([
    core_1.Component({
        moduleId: module.id,
        selector: 'my-app',
        template: ` 
        <div class="container">          
           <router-outlet
             ></router-outlet></div>          
     ` }), 
    __metadata('design:paramtypes', [form_service_1.FormService])
], AppComponent);
exports.AppComponent = AppComponent;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLHVCQUF3QyxlQUFlLENBQUMsQ0FBQTtBQUN4RCwrQkFBMEIsMkJBQTJCLENBQUMsQ0FBQTtBQVd0RDtJQUVJLFlBQ1ksWUFBeUIsQ0FBQTsyQ0FDRTtRQUQzQixpQkFBWSxHQUFaLFlBQVksQ0FBYTtRQUdyQyxVQUFLLEdBQUcsRUFBRSxDQUFDO1FBQ1gsY0FBUyxHQUFHLEVBQUUsQ0FBQztRQUNmLFFBQUcsR0FBRyxFQUFFLENBQUM7SUFIUCxDQUFDO0lBS0gsUUFBUTtRQUVKLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLENBQUM7SUEwRGhDLENBQUM7QUFBQSxDQUFDO0FBL0VIO0lBQUMsZ0JBQVMsQ0FBQztRQUNQLFFBQVEsRUFBRSxNQUFNLENBQUMsRUFBRTtRQUNuQixRQUFRLEVBQUUsUUFBUTtRQUNsQixRQUFRLEVBQUU7Ozs7TUFJUixFQUFDLENBQUM7O2dCQUFBO0FBRUssb0JBQVksZUFzRXRCLENBQUEiLCJmaWxlIjoiYXNzZXRzL2FwcC9hcHAuY29tcG9uZW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21wb25lbnQsIE91dHB1dCwgSW5qZWN0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtGb3JtU2VydmljZX0gZnJvbSBcIi4vY29tcG9uZW50cy9mb3JtLnNlcnZpY2VcIjtcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgbW9kdWxlSWQ6IG1vZHVsZS5pZCxcclxuICAgIHNlbGVjdG9yOiAnbXktYXBwJyxcclxuICAgIHRlbXBsYXRlOiBgIFxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJjb250YWluZXJcIj4gICAgICAgICAgXHJcbiAgICAgICAgICAgPHJvdXRlci1vdXRsZXRcclxuICAgICAgICAgICAgID48L3JvdXRlci1vdXRsZXQ+PC9kaXY+ICAgICAgICAgIFxyXG4gICAgIGB9KVxyXG5cclxuZXhwb3J0IGNsYXNzIEFwcENvbXBvbmVudCB7XHJcblxyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgcHJpdmF0ZSBfZm9ybVNlcnZpY2U6IEZvcm1TZXJ2aWNlLyosXHJcbiAgICAgICAgcHJpdmF0ZSBfc3RlcFNlcnZpY2U6IFN0ZXBTZXJ2aWNlKi9cclxuICAgICl7fVxyXG4gICAgbGlzdHMgPSBbXTtcclxuICAgIGxpc3RzRGF0YSA9IFtdO1xyXG4gICAgdG1wID0gW107XHJcblxyXG4gICAgbmdPbkluaXQoKSB7XHJcblxyXG4gICAgICAgIHRoaXMuX2Zvcm1TZXJ2aWNlLmluaXQoKTtcclxuPDw8PDw8PCBIRUFEXHJcblxyXG49PT09PT09XHJcbi8vICAgICAgICAgY29uc29sZSAgIC5sb2coJ2FwICAgICAgICAgICAgICAgICAgICAgICAgICBwQ29tcG8gICAgICAgICAgICAgICAgbmVudCcpO1xyXG4vLyAgICAgICAgIHRoICAgICAgaXMuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBucCAgICAgICAgICAgbSAgICAgICAgICAgICAgICAgICAgICAgIEZvciBBZHVsdHNfcyAgICAgICAgICAgICAgICAgICAgICAgICB0ZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAgICAgICBTZXJ2ICBpY2UuZ2V0U3RlcHMoKVxyXG4vLyAgICAgICAgICAgICAuc3Vic2NyaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmUoXHJcbi8vICAgICAgICAgICAgICAgICBzdGVwUmV0dXJuICAgICAgICAgICAgICA9ICAgICA+IHtcclxuLy9cclxuXHJcbi8vICAgICAgICAgICAgICAgICAgICAgLy8gICAgICB0ICAgICBoaXMuICAgICAgICAgICAgICAgIHN0ICAgZXBzID0gc3RlcFJldHVybjtcclxuLy9cclxuLy9cclxuLy9cclxuLy8gICAgICAgICAgICAgICAgICAgICBjb25zb2xlIC5sb2coXCJzdGVwUmV0dSAgICByblwiKTtcclxuLy8gICAgICAgICAgICAgICAgICAgICBjb25zbyAgICAgIGxlLiAgbG9nKHN0IGVwUmV0dXJuKTtcclxuLy8gICAgICAgICAgICAgICAgICAgICBjb25zb2xlICAgICAgIC5sbyBnKHRoaXMuX3N0ZXBTZXJ2aWNlLnN0ZXBzKTtcclxuLy8gICAgICAgICAgICAgICAgICAgICAvLyB0aGlzLnRtcCA9IHN0ZXAgUmV0dXJuLmpzb24oKTtcclxuLy8gICAgICAgICAgICAgICAgICAgICAvLyB0aGkgICAgIHMuX3N0ZXBTZXJ2aWNlLnN0ZXAgPSB0aGlzLnRtcDtcclxuLy8gICAgICAgICAgICAgICAgICAgICAvL1xyXG4vLyAgICAgICAgICAgICAgICAgICAgIC8vIC8vICAgICAgICAgICAgICAgIGZvciAoIGxldCBpID0gICAgMDsgaSA8IHN0ZXBSZXR1cm4uanNvbigpLiBsZW5ndGg7IGkrKykge1xyXG4vLyAgICAgICAgICAgICAgICAgICAgIC8vIC8vICAgICBjb25zb2xlIC4gIGxvZyhzdGVwICAgUmV0dXJuLmpzb24oKVsgIGldKTtcclxuLy8gICAgICAgICAgICAgICAgICAgICAvLyAvL1xyXG4vLyAgICAgICAgICAgICAgICAgICAgIC8vIC8vICAgICBjICAgICBvbnNvbGUubG8gIGcodGhpcy5fc3QgIGVwICAgdiAgIFNlcnZpY2Uuc3RlcCk7XHJcbi8vICAgICAgICAgICAgICAgICAgICAgLy8gLy8gfVxyXG4vLyAgICAgICAgICAgICAgICAgICAgIC8vXHJcbi8vICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2codGhpcy4gICAgX3N0ZXBTZXJ2aWNlLnN0ZXBbMF0pO1xyXG4vLyAgICAgICAgICAgICAgICAgICAgIC8vXHJcbi8vICAgICAgICAgICAgICAgICAgICAgLy8gdGhpcy5fc3RlcFNlcnZpY2Uuc3RlcHMgPSB0aGlzLnRtcDtcclxuLy8gICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLiAgICAgbG9nKHRoaXMuX3N0ZXBTZXJ2aWNlLnN0ZXBzKTtcclxuLy8gICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyh0aGlzLnRtcCk7XHJcbi8vICAgICAgICAgICAgICAgICAgICAgLyogSUYgREFUQSBBUkUgU1RPUkVEIElOIEEgQ09MTEVDVElPTiBJTiBDT05GSUcgRklMRSAqL1xyXG4vLyAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5fc3RlcFNlcnZpY2Uuc3RlcHNbMF0uY29uZmlndSAgICAgICByYXRpb24uY29sbGVjdGlvbiAhPSAndW5kZWZpbmVkJykge1xyXG4vLyAgICAgICAgICAgICAgICAgICAgIH1cclxuLy9cclxuLy8gICAgICAgICAgICAgICAgICAgICAvKiAgSUYgQSBMSVNUIEVYSVNUUyBJTiBDT05GSUcgRklMRSAqL1xyXG4vLyAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgICAgICAgIHRoaXMuX3N0ZXBTZXJ2aWNlLnN0ZXBzWzBdLmNvbmZpZ3VyYXRpb24ubGlzdCAhPSAndW5kZWZpbmVkJykge1xyXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5saXN0cy5wdXNoKHRoaXMuX3N0ZXBTZXJ2aWNlLnN0ZXBzWzBdLmNvbmZpZ3VyYXRpb24ubGlzdCk7XHJcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5saXN0c0RhICAgdGEucHVzaCh7XHJcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogdGhpcy5fc3RlcFNlcnZpY2Uuc3RlcHNbMF0ubmFtZSxcclxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwibGlzdFwiOiB0aGlzLl9zdGVwU2VyICAgICAgICB2aWNlLnN0ZXBzWzBdLmNvbmZpZ3VyYXRpb24ubGlzdFxyXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuLy8gICAgICAgICAgICAgICAgICAgICB9XHJcbi8vICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2codGhpcy5saXN0c0RhdGEpO1xyXG4vLyAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3N0ZXBTZXJ2aWNlLmRhdGFzID0gdGhpcy5saXN0c0RhdGEuc2xpY2UoKTtcclxuLy8gICAgICAgICAgICAgICAgICAgICAvLyBJTklUSUFURSBGT1JNIFNFUlZJQ0UgVE8gS0VFUCBBTEwgU0VMRUNUSU9OUyBNQURFIEJZIFVTRVIgSU4gU1RFUFNcclxuLy8gICAgICAgICAgICAgICAgICAgICB0aGlzLl9mb3JtU2VydmkgICAgICAgICAgY2UuaW5pdCgpO1xyXG4vL1xyXG4vLyAvL2NvbnNvbGUuICBsb2codGhpcy5fZm9ybVMgICAgICBlcnZpY2UpO1xyXG4vLyAvL0JpZyBsaXN0IGNvbnRhaW5zIGFsbCBsaXN0IG9mIGJ1dHRvbnNcclxuLy8gLy92YXIga2V5TmFtZSA9IHRoaXMuX3N0ZXBTZXJ2aWNlLnMgICAgICAgIGVwWzBdLmNvbmZpZ3VyYXRpb24uZm9ybV92YWx1ZS5uYW1lO1xyXG4vLyAvL3RoaXMuX2Zvcm1TZXJ2aWNlLmFycmF5U3RlcHNbMF1ba2V5TmFtZV0gPSAgdGhpcy5yb3V0ZS5zbmFwc2hvdC5wYXJhbXMubmFtZTtcclxuLy8gLy90aGlzLmxhYmVsUGFuZWwgPSB0aGlzLl9zdGVwU2VydmljZS5zdGVwW3RoaXMuaW5kZXhTdGVwT2JqXS5jb25maWd1cmF0aW9uLmxhYmVsUGFuZWw7XHJcbi8vICAgICAgICAgICAgICAgICB9ICxcclxuLy8gICAgICAgICAgICAgICAgIGVycm9yID0+IGNvbnNvbGUubG9nKGVycm9yKVxyXG4vLyAgICAgICAgICAgICApO1xyXG4vLyAgICAgfVxyXG4+Pj4+Pj4+IHRhc2tfMTVcclxuIH19Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
