"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@angular/core");
const global_1 = require("../global");
const http_1 = require("@angular/http");
const Observable_1 = require("rxjs/Observable");
let GridPanelService = class GridPanelService {
    constructor(_http) {
        this._http = _http;
        this.dataGrid = [];
        this.keysName = [];
        this.colTitle = [];
        this.keysName_details = [];
        this.colTitle_details = [];
        this.originalData = this.dataGrid;
    }
    getDatas(grid_name, valeur) {
        this.dataGrid = [];
        this.keysName = [];
        this.colTitle = [];
        let query = "grid_name=" + grid_name + "&filter=" + valeur;
        let headers = new http_1.Headers({ 'Content-Type': 'application/json' });
        let options = new http_1.RequestOptions({ headers: headers });
        var completeUrl = global_1.GlobalVariable.BASE_URL + 'data_grid?' + query;
        return this._http.get(completeUrl)
            .map(response => {
            let data = response.json();
            console.log(data);
            console.log(data[0].config);
            console.log(data[0].config_details);
            for (var i in data[0].config) {
                console.log(data[0].config[i]);
                var result = "";
                if (typeof data[0].config[i].field_panel_name != 'undefined') {
                    for (var q in data[0].config[i].field_panel_values) {
                        this.keysName.push(data[0].config[i].field_panel_name + '_' + data[0].config[i].field_panel_values[q].data);
                        let objColTitle = { title: '', key: '', type: '', filterable: false };
                        objColTitle.title = data[0].config[i].field_panel_values[q].title;
                        objColTitle.key = data[0].config[i].field_panel_name + '_' + data[0].config[i].field_panel_values[q].data;
                        objColTitle.type = "field_panel";
                        if (typeof (data[0].config[i].field_panel_values[q].filterable) != 'undefined') {
                            objColTitle.filterable = true;
                        }
                        this.colTitle.push(objColTitle);
                    }
                }
                else if (typeof data[0].config[i].type != 'undefined') {
                    switch (data[0].config[i].type) {
                        case 'checkbox': {
                            this.keysName.push(data[0].config[i].data);
                            this.colTitle.push({ "title": data[0].config[i].title, "key": data[0].config[i].data, "type": "checkbox" });
                            break;
                        }
                        case 'combo': {
                            this.keysName.push(data[0].config[i].data);
                            this.colTitle.push({
                                "title": data[0].config[i].title,
                                "key": data[0].config[i].data,
                                "type": "combo"
                            });
                            break;
                        }
                    }
                }
                else {
                    this.keysName.push(data[0].config[i].data);
                    console.log(data[0].config[i]);
                    if (typeof (data[0].config[i].filterable) != 'undefined') {
                        this.colTitle.push({ "title": data[0].config[i].title, "key": data[0].config[i].data, "type": "standard", "filterable": true });
                    }
                    else {
                        this.colTitle.push({
                            "title": data[0].config[i].title,
                            "key": data[0].config[i].data,
                            "type": "standard"
                        });
                    }
                }
            }
            for (let i in data[0].config_details) {
                switch (data[0].config_details[i].type) {
                    case 'file_details': {
                        this.keysName_details.push(data[0].config_details[i].file_name);
                        this.colTitle_details.push({ "title": data[0].config_details[i].label, "key": data[0].config_details[i].file_name, "type": "file" });
                        break;
                    }
                    case 'field': {
                        this.keysName_details.push(data[0].config_details[i].data);
                        this.colTitle_details.push({ "title": data[0].config_details[i].label, "key": data[0].config_details[i].data, "type": "field", "editable": data[0].config_details[i].editable });
                    }
                }
            }
            data.shift();
            console.log(this.keysName);
            console.log(this.colTitle);
            this.dataGrid = data;
            this.originalData = this.dataGrid;
            return 'ok';
        })
            .catch(error => Observable_1.Observable.throw(error));
    }
    getActivatedGrids(master_name) {
        let body = JSON.stringify({ "master": master_name });
        const headers = new http_1.Headers({ 'Content-Type': 'application/json' });
        var completeUrl = global_1.GlobalVariable.BASE_URL + 'get_grids';
        return this._http.post(completeUrl, body, { headers: headers })
            .toPromise().then(response => response.json())
            .catch(error => Observable_1.Observable.throw(error.json()));
    }
    filterParNom(obj, arg) {
        console.log(obj);
        console.log(arg);
        console.log(this);
        let key = this.key;
        let value = this.value;
        console.log(key);
        console.log(value);
        console.log(obj[key]);
        if (value.indexOf(obj[key]) >= 0) {
            return true;
        }
        else {
            return false;
        }
    }
    filterData(value, key) {
        console.log(value);
        if (value == '') {
            this.dataGrid = this.originalData;
        }
        else {
            let result = this.dataGrid.filter(this.filterParNom, { "key": key, "value": value });
            console.log(result);
            if (result.length > 0) {
                this.dataGrid = result;
            }
            else {
                this.dataGrid = this.originalData;
            }
        }
    }
    updateCheckbox(value, _id, master, app_name, field_name) {
        console.log(master);
        let body = JSON.stringify({ "value": value, "_id": _id, "master": master, "appName": app_name, "field_name": field_name });
        const headers = new http_1.Headers({ 'Content-Type': 'application/json' });
        var completeUrl = global_1.GlobalVariable.BASE_URL + 'update_checkbox';
        return this._http.post(completeUrl, body, { headers: headers })
            .map(response => response)
            .catch(error => Observable_1.Observable.throw(error.json()));
    }
    changeCourse(course_type, user_id) {
        console.log(course_type);
        console.log(user_id);
        let body = JSON.stringify({ "course_type": course_type, "_id": user_id });
        const headers = new http_1.Headers({ 'Content-Type': 'application/json' });
        var completeUrl = global_1.GlobalVariable.BASE_URL + 'update_course_type';
        return this._http.post(completeUrl, body, { headers: headers })
            .map(response => response)
            .catch(error => Observable_1.Observable.throw(error.json()));
    }
};
GridPanelService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [http_1.Http])
], GridPanelService);
exports.GridPanelService = GridPanelService;

//# sourceMappingURL=data:application/json;base64,
