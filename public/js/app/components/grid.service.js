"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var global_1 = require("../global");
var http_1 = require("@angular/http");
var Observable_1 = require("rxjs/Observable");
var GridPanelService = (function () {
    function GridPanelService(_http) {
        this._http = _http;
        this.dataGrid = [];
        this.keysName = [];
        this.colTitle = [];
        this.keysName_details = [];
        this.colTitle_details = [];
        this.originalData = this.dataGrid;
    }
    GridPanelService.prototype.getDatas = function (grid_name, valeur) {
        var _this = this;
        this.dataGrid = [];
        this.keysName = [];
        this.colTitle = [];
        var query = "grid_name=" + grid_name + "&filter=" + valeur;
        var headers = new http_1.Headers({ 'Content-Type': 'application/json' });
        var options = new http_1.RequestOptions({ headers: headers });
        var completeUrl = global_1.GlobalVariable.BASE_URL + 'data_grid?' + query;
        return this._http.get(completeUrl)
            .map(function (response) {
            var data = response.json();
            console.log(data);
            console.log(data[0].config);
            console.log(data[0].config_details);
            for (var i in data[0].config) {
                console.log(data[0].config[i]);
                var result = "";
                if (typeof data[0].config[i].field_panel_name != 'undefined') {
                    for (var q in data[0].config[i].field_panel_values) {
                        _this.keysName.push(data[0].config[i].field_panel_name + '_' + data[0].config[i].field_panel_values[q].data);
                        var objColTitle = {};
                        objColTitle.title = data[0].config[i].field_panel_values[q].title;
                        objColTitle.key = data[0].config[i].field_panel_name + '_' + data[0].config[i].field_panel_values[q].data;
                        objColTitle.type = "field_panel";
                        if (typeof (data[0].config[i].field_panel_values[q].filterable) != 'undefined') {
                            objColTitle.filterable = true;
                        }
                        _this.colTitle.push(objColTitle);
                    }
                }
                else if (typeof data[0].config[i].type != 'undefined') {
                    switch (data[0].config[i].type) {
                        case 'checkbox': {
                            _this.keysName.push(data[0].config[i].data);
                            _this.colTitle.push({ "title": data[0].config[i].title, "key": data[0].config[i].data, "type": "checkbox" });
                            break;
                        }
                        case 'combo': {
                            _this.keysName.push(data[0].config[i].data);
                            _this.colTitle.push({
                                "title": data[0].config[i].title,
                                "key": data[0].config[i].data,
                                "type": "combo"
                            });
                            break;
                        }
                    }
                }
                else {
                    _this.keysName.push(data[0].config[i].data);
                    console.log(data[0].config[i]);
                    if (typeof (data[0].config[i].filterable) != 'undefined') {
                        _this.colTitle.push({ "title": data[0].config[i].title, "key": data[0].config[i].data, "type": "standard", "filterable": true });
                    }
                    else {
                        _this.colTitle.push({
                            "title": data[0].config[i].title,
                            "key": data[0].config[i].data,
                            "type": "standard"
                        });
                    }
                }
            }
            for (var i_1 in data[0].config_details) {
                switch (data[0].config_details[i_1].type) {
                    case 'file_details': {
                        _this.keysName_details.push(data[0].config_details[i_1].file_name);
                        _this.colTitle_details.push({ "title": data[0].config_details[i_1].label, "key": data[0].config_details[i_1].file_name, "type": "file" });
                        break;
                    }
                    case 'field': {
                        _this.keysName_details.push(data[0].config_details[i_1].data);
                        _this.colTitle_details.push({ "title": data[0].config_details[i_1].label, "key": data[0].config_details[i_1].data, "type": "field", "editable": data[0].config_details[i_1].editable });
                    }
                }
            }
            data.shift();
            console.log(_this.keysName);
            console.log(_this.colTitle);
            _this.dataGrid = data;
            _this.originalData = _this.dataGrid;
            return 'ok';
        })
            .catch(function (error) { return Observable_1.Observable.throw(error); });
    };
    GridPanelService.prototype.getActivatedGrids = function (master_name) {
        var body = JSON.stringify({ "master": master_name });
        var headers = new http_1.Headers({ 'Content-Type': 'application/json' });
        var completeUrl = global_1.GlobalVariable.BASE_URL + 'get_grids';
        return this._http.post(completeUrl, body, { headers: headers })
            .toPromise().then(function (response) { return response.json(); })
            .catch(function (error) { return Observable_1.Observable.throw(error.json()); });
    };
    GridPanelService.prototype.filterParNom = function (obj, arg) {
        console.log(obj);
        console.log(arg);
        console.log(this);
        var key = this.key;
        var value = this.value;
        console.log(key);
        console.log(value);
        console.log(obj[key]);
        if (value.indexOf(obj[key]) >= 0) {
            return true;
        }
        else {
            return false;
        }
    };
    GridPanelService.prototype.filterData = function (value, key) {
        console.log(value);
        if (value == '') {
            this.dataGrid = this.originalData;
        }
        else {
            var result = this.dataGrid.filter(this.filterParNom, { "key": key, "value": value });
            console.log(result);
            if (result.length > 0) {
                this.dataGrid = result;
            }
            else {
                this.dataGrid = this.originalData;
            }
        }
    };
    GridPanelService.prototype.updateCheckbox = function (value, _id, master, app_name, field_name) {
        console.log(master);
        var body = JSON.stringify({ "value": value, "_id": _id, "master": master, "appName": app_name, "field_name": field_name });
        var headers = new http_1.Headers({ 'Content-Type': 'application/json' });
        var completeUrl = global_1.GlobalVariable.BASE_URL + 'update_checkbox';
        return this._http.post(completeUrl, body, { headers: headers })
            .map(function (response) { return response; })
            .catch(function (error) { return Observable_1.Observable.throw(error.json()); });
    };
    GridPanelService.prototype.changeCourse = function (course_type, user_id) {
        console.log(course_type);
        console.log(user_id);
        var body = JSON.stringify({ "course_type": course_type, "_id": user_id });
        var headers = new http_1.Headers({ 'Content-Type': 'application/json' });
        var completeUrl = global_1.GlobalVariable.BASE_URL + 'update_course_type';
        return this._http.post(completeUrl, body, { headers: headers })
            .map(function (response) { return response; })
            .catch(function (error) { return Observable_1.Observable.throw(error.json()); });
    };
    GridPanelService = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [http_1.Http])
    ], GridPanelService);
    return GridPanelService;
}());
exports.GridPanelService = GridPanelService;

//# sourceMappingURL=data:application/json;base64,
