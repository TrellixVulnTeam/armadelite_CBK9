"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@angular/core");
const router_1 = require("@angular/router");
const forms_1 = require("@angular/forms");
const form_service_1 = require("./form.service");
const step_service_1 = require("../Engine/step.service");
const collection_service_1 = require("../Engine/collection.service");
const mail_service_1 = require("../Engine/mail.service");
const saveService_1 = require("./saveService");
let MainComponent = class MainComponent {
    constructor(route, _fb, _formService, _stepService, _collectionService, _mailService, _saveService) {
        this.route = route;
        this._fb = _fb;
        this._formService = _formService;
        this._stepService = _stepService;
        this._collectionService = _collectionService;
        this._mailService = _mailService;
        this._saveService = _saveService;
        this.submitted = false;
        this.listsData = [];
        this.dataLoaded = false;
        this.stepId = 1;
        this.previousStepId = 0;
        this.indexStepObj = 0;
        this.labelPanel = "";
        this.datas = [];
        this.appName = "";
        this.lists = [];
        this.formCompleted = false;
        this.valuesSelected = [];
        this.btn_class = "black_button";
        this.tmp_id = '';
        this.progressBar = 0;
        this.customCollectionData = [];
    }
    ngOnInit() {
        console.log('init main Component');
        console.log(this._stepService.steps[0].configuration);
        if (typeof this._stepService.steps[0].configuration.list != 'undefined') {
            this.lists.push(this._stepService.steps[0].configuration.list);
            this.listsData.push({
                "name": this._stepService.steps[0].name,
                "list": this._stepService.steps[0].configuration.list
            });
        }
        console.log(this.listsData);
        var master_type = this._stepService.steps[0].master_type;
        this.appName = this._stepService.steps[0].master_name;
        console.log("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
        console.log(this._stepService.steps[0]);
        this.current_step_id = this.route
            .queryParams
            .map(params => params['id'] || 'None');
        console.log(this.stepId);
        console.log(this.current_step_id);
        console.log(this._formService);
        this.goToNextStep(-1);
        console.log(this._stepService.steps);
        console.log(this.stepId);
    }
    goPreviousStep($event) {
        this.indexStepObj = $event.newIdxStepObj;
        console.log(this._formService);
        console.log(this._stepService);
        console.log(this.datas);
        this.stepId = this._stepService.steps[this.indexStepObj].step_id;
        let stepName = this._stepService.steps[this.indexStepObj].name;
        console.log(this._formService.arraySteps[this.indexStepObj]);
        for (let i = 0; i < this.datas.length; i++) {
            if (stepName == this.datas[i].name) {
                console.log(this.datas[i]);
            }
        }
        console.log(this.indexStepObj);
    }
    onSubmit() {
        this.submitted = true;
    }
    goToNextStep(stepIndex) {
        if (stepIndex > 0) {
            console.log(this._stepService.steps[stepIndex].name);
        }
        console.log(this._formService);
        console.log("GO NEXT STEP");
        console.log(stepIndex);
        this.indexStepObj = stepIndex;
        console.log('currentStepId: ' + this.current_step_id);
        console.log("indexStepObj : " + this.indexStepObj);
        console.log('tmp_id : ' + this.tmp_id);
        console.log(this.datas);
        let nbSteps = this._stepService.steps.length;
        nbSteps = nbSteps - 1;
        if (this.indexStepObj == nbSteps) {
            console.log('save form');
            console.log(this._formService.arraySteps);
            this._saveService.saveFiles()
                .subscribe(data => {
                console.log('*****************************************************');
                console.log(data);
                let arrayFiles = [];
                for (let i in data) {
                    console.log(data[i]);
                    arrayFiles.push({ "fileName": data[i].step_name, "file_url": data[i].file_url });
                }
                if (arrayFiles.length > 0) {
                    this._formService.arraySteps.push({ "fileDetails": arrayFiles });
                }
                console.log(this._formService.arraySteps);
                this._saveService.saveData(this._stepService.steps[this.indexStepObj].step_id, this.appName)
                    .subscribe(data => {
                    this.formCompleted = true;
                    if (typeof this._stepService.steps[this.indexStepObj].configuration.mail_id != 'undefined') {
                        console.log("SEND NOTIFICATION");
                        console.log(data._body);
                        this._mailService.sendMail(this._stepService.steps[this.indexStepObj].configuration.mail_id, data._body, this.appName)
                            .subscribe(mailState => {
                            console.log(mailState);
                        }, error => console.log(error));
                        console.log(data._body);
                    }
                }, error => console.log(error));
            }, error => console.log(error));
        }
        else {
            let tmp_step_id = this.indexStepObj;
            this.indexStepObj++;
            console.log("stepId: " + this.stepId);
            console.log("indexStepObj: " + this.indexStepObj);
            console.log(this._stepService.steps[this.indexStepObj].step_id);
            if (this.indexStepObj > 1) {
                while (this._stepService.steps[this.indexStepObj].step_id == this.stepId) {
                    this.indexStepObj++;
                }
            }
            let condition = false;
            while (condition == false) {
                console.log(this._stepService.steps[this.indexStepObj]);
                console.log(this._stepService.steps[this.indexStepObj].conditions);
                if (this._stepService.steps[this.indexStepObj].conditions.length == 0) {
                    console.log("pas de condition l'index " + this.indexStepObj);
                    condition = true;
                    break;
                }
                if (this._stepService.steps[this.indexStepObj].conditions.length == 1) {
                    console.log("1 condition dans step à l'index " + this.indexStepObj);
                    let keyCondition = this._stepService.steps[this.indexStepObj].conditions[0].key;
                    let valueCondition = this._stepService.steps[this.indexStepObj].conditions[0].value;
                    console.log("valueCondition: " + valueCondition);
                    console.log("keyCondition: " + keyCondition);
                    console.log(this._formService.arraySteps.find(x => x[keyCondition] === valueCondition));
                    if (typeof (this._formService.arraySteps.find(x => x[keyCondition] === valueCondition)) != 'undefined') {
                        condition = true;
                        break;
                    }
                }
                if (this._stepService.steps[this.indexStepObj].conditions.length == 2) {
                    console.log("2 conditions dans step à l'index " + this.indexStepObj);
                    let keyCondition = this._stepService.steps[this.indexStepObj].conditions[0].key;
                    let valueCondition = this._stepService.steps[this.indexStepObj].conditions[0].value;
                    console.log(this._stepService.steps[this.indexStepObj]);
                    let keyCondition2 = this._stepService.steps[this.indexStepObj].conditions[1].key;
                    let valueCondition2 = this._stepService.steps[this.indexStepObj].conditions[1].value;
                    if (typeof (this._formService.arraySteps.find(x => x[keyCondition2] === valueCondition2)) != 'undefined' && typeof (this._formService.arraySteps.find(x => x[keyCondition] === valueCondition)) != 'undefined') {
                        condition = true;
                        break;
                    }
                }
                console.log(this._stepService.steps[this.indexStepObj].conditions);
                console.log(typeof (this._stepService.steps[this.indexStepObj].conditions));
                if (condition == false)
                    this.indexStepObj++;
            }
            var tmpNewstepId = this._stepService.steps[this.indexStepObj].step_id;
            console.log("type component: " + this._stepService.steps[this.indexStepObj].type);
            switch (this._stepService.steps[this.indexStepObj].type) {
                case 'click_selection':
                    console.log("indexStepObj : " + this.indexStepObj);
                    console.log('tmp_id : ' + this.tmp_id);
                    console.log(this.datas);
                    if (typeof this._stepService.steps[this.indexStepObj].configuration.collection != 'undefined') {
                        console.log("GET DATA FROM COLLECTION");
                        var filterList = [];
                        var collectionName = this._stepService.steps[this.indexStepObj].configuration.collection.name;
                        console.log(this._stepService.steps[this.indexStepObj]);
                        let valueToFilter = this._stepService.steps[this.indexStepObj].configuration.collection.filter[0].step_id;
                        console.log(valueToFilter);
                        console.log(this._stepService.steps[this.indexStepObj].configuration.collection.filter[0].step_id);
                        console.log(this._formService);
                        filterList = this._stepService.steps[this.indexStepObj].configuration.collection.filter;
                        var valueToKeep = '';
                        if (typeof this._stepService.steps[this.indexStepObj].configuration.collection.value != 'undefined') {
                            valueToKeep = this._stepService.steps[this.indexStepObj].configuration.collection.value;
                        }
                        console.log(this.tmp_id);
                        this._collectionService.getDatas(collectionName, filterList, valueToKeep, 'btn')
                            .then(data => {
                            console.log(data);
                            var objLists = { "name": this._stepService.steps[this.indexStepObj].name, "list_fr": "", "list_nl": "", "list_en": "", "list_es": "", "loaded": true };
                            objLists.list_fr = data;
                            objLists.list_nl = data;
                            objLists.list_es = data;
                            objLists.list_en = data;
                            for (let i in this.datas) {
                                if (this.datas[i].name == this._stepService.steps[this.indexStepObj].name) {
                                    this.datas.splice(parseInt(i), 1);
                                }
                            }
                            this.lists.push(data);
                            this.datas.push(objLists);
                            this.previousStepId = this.stepId;
                            console.log(this.stepId);
                            console.log(this.datas);
                            this.stepId = tmpNewstepId;
                            console.log(this.stepId);
                        }, error => console.log(error));
                    }
                    else {
                        let leaveFunction = false;
                        console.log(this._stepService.steps[this.indexStepObj].configuration);
                        if (leaveFunction == false) {
                            console.log("GET DATA FROM LIST");
                            console.log(this._stepService.steps[this.indexStepObj].configuration.list_fr);
                            console.log(this._stepService.steps[this.indexStepObj].name);
                            var objLists = { "name": this._stepService.steps[this.indexStepObj].name, "list_fr": [], "list_nl": [], "list_en": [], "list_es": [], "list": [] };
                            if (typeof this._stepService.steps[this.indexStepObj].configuration.list !== 'undefined') {
                                objLists.list = this._stepService.steps[this.indexStepObj].configuration.list;
                            }
                            if (typeof this._stepService.steps[this.indexStepObj].configuration.list_fr !== 'undefined') {
                                objLists.list_fr = this._stepService.steps[this.indexStepObj].configuration.list_fr;
                            }
                            if (typeof this._stepService.steps[this.indexStepObj].configuration.list_nl !== 'undefined') {
                                objLists.list_nl = this._stepService.steps[this.indexStepObj].configuration.list_nl;
                            }
                            if (typeof this._stepService.steps[this.indexStepObj].configuration.list_en !== 'undefined') {
                                objLists.list_en = this._stepService.steps[this.indexStepObj].configuration.list_en;
                            }
                            if (typeof this._stepService.steps[this.indexStepObj].configuration.list_es !== 'undefined') {
                                objLists.list_es = this._stepService.steps[this.indexStepObj].configuration.list_es;
                            }
                            for (let i in this.datas) {
                                if (this.datas[i].name == this._stepService.steps[this.indexStepObj].name) {
                                    this.datas.splice(parseInt(i), 1);
                                }
                            }
                            this.datas.push(objLists);
                            console.log(this._stepService.steps[this.indexStepObj]);
                            console.log(this.indexStepObj);
                            console.log(this.datas);
                            this.stepId = tmpNewstepId;
                        }
                    }
                    break;
                case 'image_selection':
                    if (typeof this._stepService.steps[this.indexStepObj].configuration.collection != 'undefined') {
                        console.log("GET DATA FROM COLLECTION");
                        let filterList = [];
                        let collectionName = this._stepService.steps[this.indexStepObj].configuration.collection.name;
                        console.log(collectionName);
                        console.log(this._stepService.steps[this.indexStepObj]);
                        if (typeof this._stepService.steps[this.indexStepObj].configuration.filter != 'undefined') {
                            let valueToFilter = this._stepService.steps[this.indexStepObj].configuration.collection.filter[0].step_id;
                            console.log(valueToFilter);
                            console.log(this._stepService.steps[this.indexStepObj].configuration.collection.filter[0].step_id);
                            console.log(this._formService);
                            filterList = this._stepService.steps[this.indexStepObj].configuration.collection.filter;
                        }
                        var valueToKeep = '';
                        if (typeof this._stepService.steps[this.indexStepObj].configuration.collection.value != 'undefined') {
                            valueToKeep = this._stepService.steps[this.indexStepObj].configuration.collection.value;
                        }
                        console.log(valueToKeep);
                        console.log(this.tmp_id);
                        this._collectionService.getDatas(collectionName, filterList, valueToKeep, 'img_btn')
                            .then(data => {
                            console.log('service returns data');
                            console.log(data);
                            this.lists.push(data);
                            for (let i in data) {
                                this.datas.push({
                                    "name": data[i].name,
                                    "url": data[i].url,
                                    "list": data[i].list,
                                    "loaded": true
                                });
                            }
                            this.previousStepId = this.stepId;
                            this.stepId = tmpNewstepId;
                            console.log("TEST IF ONLY 1 RECORD");
                            this.dataLoaded = true;
                            if (data.length == 1) {
                                this._formService.arraySteps[this.indexStepObj][this._stepService.steps[this.indexStepObj].configuration.form_value.name] = data[0];
                                this.goToNextStep(this.indexStepObj);
                            }
                            console.log(this.stepId);
                        }, error => console.log(error));
                    }
                    if (typeof this._stepService.steps[this.indexStepObj].configuration.list != 'undefined') {
                        console.log("GET DATA FROM LIST");
                        this.lists.push(this._stepService.steps[this.indexStepObj].configuration.list);
                        this.datas.push({
                            "name": this._stepService.steps[this.indexStepObj].name,
                            "list": this._stepService.steps[this.indexStepObj].configuration.list
                        });
                        console.log(this.datas);
                        this.stepId = tmpNewstepId;
                    }
                    break;
                case 'field_panel':
                    console.log('field_panel');
                    this.stepId = tmpNewstepId;
                    break;
                case 'file_upload':
                    console.log("file_upload");
                    this.stepId = tmpNewstepId;
                    break;
                case 'multi_selection':
                    var listData = { "name": this._stepService.steps[this.indexStepObj].name, "list_fr": "", "list_nl": "" };
                    console.log(this._stepService.language);
                    console.log(listData);
                    console.log(this._stepService.steps[this.indexStepObj].configuration.list_fr);
                    if (typeof this._stepService.steps[this.indexStepObj].configuration.list_fr != 'undefined') {
                        console.log(listData);
                        listData.list_fr = this._stepService.steps[this.indexStepObj].configuration.list_fr;
                    }
                    if (typeof this._stepService.steps[this.indexStepObj].configuration.list_en != 'undefined') {
                    }
                    if (typeof this._stepService.steps[this.indexStepObj].configuration.list_es != 'undefined') {
                    }
                    if (typeof this._stepService.steps[this.indexStepObj].configuration.list_nl != 'undefined') {
                        listData.list_nl = this._stepService.steps[this.indexStepObj].configuration.list_nl;
                    }
                    console.log(listData);
                    this.datas.push(listData);
                    console.log(this.datas);
                    this.stepId = tmpNewstepId;
                    break;
                default:
                    console.log('default');
            }
        }
        if (this.indexStepObj > -1) {
            if (typeof this._stepService.steps[this.indexStepObj].configuration.mail_id != "undefined") {
            }
        }
    }
    onValueSelected($event) {
        let keyToFind = $event.valueName;
        console.log(keyToFind);
        console.log(this._formService.arraySteps);
        let isFound = false;
        for (let i = 0; i < this._formService.arraySteps.length; i++) {
            if (typeof (this._formService.arraySteps[i][keyToFind]) !== 'undefined') {
                console.log(this._formService.arraySteps[i]);
                console.log($event.valueSelected);
                this._formService.arraySteps[i][keyToFind] = $event.valueSelected;
                console.log("I: " + i);
                isFound = true;
                break;
            }
        }
        if (isFound == false) {
            this._mailService.logMail(keyToFind, $event.valueSelected, this.appName)
                .subscribe(mailState => {
                console.log(mailState);
            }, error => console.log(error));
        }
        this.goToNextStep($event.stepIdx);
    }
    onSubmitFile($event) {
        console.log($event);
        console.log($event.fileUploaded);
        this._formService.arraySteps[this.indexStepObj].file_uploaded = $event.fileUploaded;
        this.goToNextStep($event.stepIdx);
    }
    onSubmitingFields($event) {
        console.log('OnSubmitingFields');
        console.log($event.valueSelected[0]);
        console.log($event);
        console.log($event.stepIdx);
        console.log($event.name);
        this._formService.current_step_id = $event.stepId;
        for (let j = 0; j < this._formService.arraySteps.length; j++) {
            console.log(this._formService.arraySteps[j].keys);
            console.log(this._formService.arraySteps[j].nom);
            if (this._formService.arraySteps[j].nom == $event.name) {
                let tmpKeyName = $event.name;
                console.log("tmpKeyName: " + tmpKeyName);
                for (let i = 0; i < $event.valueSelected.length; i++) {
                    let keyObject = $event.valueName[i];
                    let newValue = $event.valueSelected[i];
                    console.log("keyObject: " + keyObject);
                    console.log("newValue: " + newValue);
                    this._formService.arraySteps[j][tmpKeyName][i][keyObject] = newValue;
                    console.log(this._formService.arraySteps[j][tmpKeyName][i][keyObject]);
                    console.log(' ');
                }
                break;
            }
        }
        console.log(this._formService.arraySteps);
        console.log(this._formService);
        this.goToNextStep($event.stepIdx);
    }
    getSelections($event) {
        this._formService.arraySteps[$event.stepIdx][$event.valueName] = $event.valueSelected;
        this.goToNextStep($event.stepIdx);
    }
    changeLanguage(language) {
        this._stepService.language = language;
    }
};
MainComponent = __decorate([
    core_1.Component({
        selector: 'vehicule-detail',
        template: `
    <div *ngIf="formCompleted == false" class="{{_stepService.template.panel_heading}}">
        <div class="row">
            <!--<div class="col-md-8" *ngIf="this.stepId == 1 && this.appName !='play'" >-->
              <!--<button class="{{_stepService.template.back_btn}}" ><i class="glyphicon glyphicon-triangle-left" >  </i></button>-->
            <!--</div>-->
            <div class="col-md-8" *ngIf="this.stepId == 1 && this.appName !='play'"><button  style="height:20px; background-color: transparent; border-width: 0px 0 0;" ></button></div>
            <div class="col-md-8" *ngIf="this.stepId != 1 && this.appName !='play'" align="left" >
                <previous-page 
                    [stepId] = "stepId"
                    [idxStepObj] =  "indexStepObj"
                    (change) = goPreviousStep($event) >
                </previous-page>
            </div>
            <div class="col-md-4" >

                  <div class="pull-right" *ngIf="this.stepId == 1">
                    <span style="width: 20px; height:20px;" *ngFor="let language of _stepService.languages">
                         <button title="{{language}}"   (click)="changeLanguage(language)" style="background-color: transparent; border-width: 0px 0 0;">
                            <img src="images/flags/{{language}}.png" />
                         </button>
                    </span>
                 </div>
            </div>
        </div>
        <div class="row">
            <div align="center" *ngIf="_stepService.steps[0].logo_url != ''" >    
                <img class="img-thumbnail"  src="{{_stepService.steps[0].logo_url}}" width="240" height="160">
            </div>
        </div>
        <div class="row" >
        </div>
 </div>
<div class="panel panel-default" *ngIf="formCompleted == false">
   
   <div *ngFor="let objStep of this._stepService.steps; let i = index" >
        <!-- IMAGE LIST BUTTON PANEL -->
        <div *ngIf="objStep.type == 'image_selection' && dataLoaded ">
            <panel-btn-img
                *ngIf="stepId == objStep.step_id"
                    [objStep] = "objStep" 
                    [stepIdx]="i"
                    [valueSelected]="objStep.configuration.selection"  
                    [listOfElements]="this.datas"
                    (change)="onValueSelected($event)">
            </panel-btn-img>
        </div>
        
        <!-- LIST BUTTON PANEL -->
        <div *ngIf="objStep.type == 'click_selection'">
            <list-buttons          
                *ngIf="stepId == objStep.step_id"
                    [objStep] = "objStep" 
                    [valueSelected]="objStep.configuration.selection"
                    [stepIdx]="i"
                    [listOfElements]="this.datas"
                    (change)="onValueSelected($event)"
            ></list-buttons>
        </div>

        <!-- MULTIPLE SELECTION LIST BUTTON-->
        <div *ngIf="objStep.type == 'multi_selection'">
            <multi-selection
                *ngIf="stepId == objStep.step_id"
                    [objStep] = "objStep" 
                    [valueSelected]="objStep.configuration.selection"
                    [stepIdx]="i"
                    [listOfElements]="this.datas"
                    [valuesSelected]="this.valuesSelected"
                    (change)="getSelections($event)"         
            ></multi-selection>        
        </div>
        
        <!--- FIELD PANEL --->
        <div *ngIf="objStep.type == 'field_panel'">
            <field-panel          
                *ngIf="stepId == objStep.step_id"
                    [objStep] = "objStep"
                    [stepIdx]="i"
                    (sent)="onSubmitingFields($event)"
            ></field-panel>
        </div>
        
        <!--UPLOAD FILE PANEL --->
        <div *ngIf="objStep.type == 'file_upload'">
            <file-upload          
                *ngIf="stepId == objStep.step_id"
                    [objStep] = "objStep"
                    [stepIdx]="i"
                    (sent)="onSubmitFile($event)"
            ></file-upload>
        </div>
 </div>
      <!--<progress class="progress progress-danger" [attr.value]="progressBar" max="100" ></progress>-->
      <!--<div class="progress">-->
  <!--<div class="progress-bar" role="progressbar" aria-valuenow="11" aria-valuemin="3" aria-valuemax="12" style="min-width: 2em;">-->
    <!--0%-->
  <!--</div>-->
<!--</div>-->
<save-button
    *ngIf="this._stepService.steps[0].master_type == 'workflow'"
    (saveStep)="saveStep($event)"
    [stepId]="this.stepId"
    [app_name]="this.appName"
>

</save-button>

</div>



 <div align="center" class="jumbotron" *ngIf="formCompleted" class="alert alert-success" role="alert">
      <div class="container">
         <h1 *ngIf="_stepService.language == 'en'" >Your application form has been sent correctly. Thank you very much. We will contact you shortly.</h1> 
         <h1 *ngIf="_stepService.language == 'es'" >Su formulario de solicitud ha sido enviado correctamente. Muchas gracias. Nos pondremos en contacto con usted en breve.</h1>
         <h1 *ngIf="_stepService.language == 'fr'" >Votre demande a bien été envoyée, nous prendrons contact avec vous dans les plus brefs délais.</h1>         
    </div>
 </div>
`,
        styles: [` nav{    
            width: 150px;
            float: left;
            display: inline;
            margin: 0;
            padding: 0;
            margin-right: 10px;
            }`]
    }),
    __metadata("design:paramtypes", [router_1.ActivatedRoute, forms_1.FormBuilder,
        form_service_1.FormService, step_service_1.StepService,
        collection_service_1.CollectionService, mail_service_1.MailService,
        saveService_1.SaveService])
], MainComponent);
exports.MainComponent = MainComponent;

//# sourceMappingURL=data:application/json;base64,
