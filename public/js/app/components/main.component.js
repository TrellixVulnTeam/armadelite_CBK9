"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('@angular/core');
var router_1 = require("@angular/router");
var forms_1 = require("@angular/forms");
var form_service_1 = require("./form.service");
var step_service_1 = require("../Engine/step.service");
var collection_service_1 = require("../Engine/collection.service");
var mail_service_1 = require("../Engine/mail.service");
var saveService_1 = require("./saveService");
var MainComponent = (function () {
    function MainComponent(route, _fb, _formService, _stepService, _collectionService, _mailService, _saveService) {
        this.route = route;
        this._fb = _fb;
        this._formService = _formService;
        this._stepService = _stepService;
        this._collectionService = _collectionService;
        this._mailService = _mailService;
        this._saveService = _saveService;
        this.submitted = false;
        this.listsData = [];
        this.dataLoaded = false;
        this.stepId = 1;
        this.previousStepId = 0;
        this.indexStepObj = 0;
        this.labelPanel = "";
        this.datas = [];
        this.appName = "";
        this.lists = [];
        this.formCompleted = false;
        this.valuesSelected = [];
        this.btn_class = "black_button";
        this.tmp_id = '';
        this.progressBar = 0;
        this.customCollectionData = [];
    }
    MainComponent.prototype.ngOnInit = function () {
        console.log('init main Component');
        console.log(this._stepService.steps[0].configuration);
        if (typeof this._stepService.steps[0].configuration.list != 'undefined') {
            this.lists.push(this._stepService.steps[0].configuration.list);
            this.listsData.push({
                "name": this._stepService.steps[0].name,
                "list": this._stepService.steps[0].configuration.list
            });
        }
        console.log(this.listsData);
        this._stepService.datas = this.listsData.slice();
        var master_type = this._stepService.steps[0].master_type;
        this.appName = this._stepService.steps[0].master_name;
        console.log("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
        console.log(this._stepService.steps[0]);
        this.current_step_id = this.route
            .queryParams
            .map(function (params) { return params['id'] || 'None'; });
        console.log(this.stepId);
        console.log(this.current_step_id);
        console.log(this._formService);
        if (!(typeof this.current_step_id.source._value.current_id == 'undefined')) {
            if (this.current_step_id.source._value.current_id == 'None') {
                this.tmp_id = this.current_step_id.source._value._id;
                this.goToStep(this.current_step_id.source._value.current_id);
            }
        }
        else {
            this.goToNextStep(-1);
        }
        console.log(this._stepService.steps);
        console.log(this.stepId);
    };
    MainComponent.prototype.goPreviousStep = function ($event) {
        this.indexStepObj = $event.newIdxStepObj;
        console.log(this._formService);
        console.log(this._stepService);
        console.log(this.datas);
        this.stepId = this._stepService.steps[this.indexStepObj].step_id;
        var stepName = this._stepService.steps[this.indexStepObj].name;
        console.log(this._formService.arraySteps[this.indexStepObj]);
        for (var i = 0; i < this.datas.length; i++) {
            if (stepName == this.datas[i].name) {
                console.log(this.datas[i]);
            }
        }
        console.log(this.indexStepObj);
    };
    MainComponent.prototype.onSubmit = function () {
        this.submitted = true;
    };
    MainComponent.prototype.saveStep = function () {
        console.log('save');
    };
    MainComponent.prototype.goToStep = function (curStepId) {
        var _this = this;
        console.log("GO TO STEP : " + curStepId);
        console.log(this._formService);
        var _loop_1 = function(i) {
            if (this_1._stepService.steps[i].step_id == curStepId) {
                console.log('STEP ID : ' + this_1._stepService.steps[i].step_id);
                switch (this_1._stepService.steps[i].type) {
                    case 'click_selection':
                        console.log('LIST BUTTONS CASE');
                        console.log(this_1._stepService.steps[i].step_id);
                        if (typeof this_1._stepService.steps[i].configuration.collection != 'undefined') {
                            filterList = [];
                            collectionName = this_1._stepService.steps[i].configuration.collection.name;
                            valueToFilter = this_1._stepService.steps[i].configuration.collection.filter[0].step_id;
                            console.log(valueToFilter);
                            console.log(this_1._stepService.steps[i].configuration.collection.filter[0].step_id);
                            console.log(this_1._formService);
                            filterList = this_1._stepService.steps[i].configuration.collection.filter;
                            if (typeof this_1._stepService.steps[i].configuration.collection.value != 'undefined') {
                                valueToKeep = this_1._stepService.steps[i].configuration.collection.value;
                            }
                            else {
                                valueToKeep = '';
                            }
                            console.log('currentStepId: ' + this_1.current_step_id);
                            console.log('tmp_id : ' + this_1.tmp_id);
                            console.log(this_1.datas);
                            this_1._collectionService.getFormData(this_1.tmp_id, collectionName, filterList, valueToKeep)
                                .subscribe(function (data) {
                                console.log('apres getFormData()');
                                console.log(data);
                                console.log('STEP SERVICE N' + i);
                                console.log(_this._stepService.steps[i]);
                                _this._collectionService.getDatas(_this._stepService.steps[i].configuration.collection.name, _this._stepService.steps[i].configuration.collection.filter[0].step_id, valueToKeep, 'btn')
                                    .then(function (result) {
                                    console.log(result);
                                    _this.datas.push({
                                        "name": _this._stepService.steps[i].name,
                                        "list": result
                                    });
                                    _this.previousStepId = _this.stepId;
                                    console.log(_this.stepId);
                                    console.log(_this.lists);
                                    console.log(_this.datas);
                                    _this.stepId = curStepId;
                                    console.log(_this.stepId);
                                }, function (error) { return console.log(error); });
                            }, function (error) { return console.log(error); });
                        }
                        if (typeof this_1._stepService.steps[i].configuration.list != 'undefined') {
                            this_1.datas.push({
                                "name": this_1._stepService.steps[i].name,
                                "list": this_1._stepService.steps[i].configuration.list,
                                "loaded": true
                            });
                            this_1.stepId = curStepId;
                        }
                        break;
                    case 'field_panel':
                        console.log('FIELD PANEL CASE');
                        this_1.stepId = curStepId;
                        break;
                    default:
                        console.log('STEP TYPE: ' + this_1._stepService.steps[i].type + 'DOES NOT EXIST IN STEP.SERVICE ');
                }
                return "break";
            }
            this_1.datas = this_1._stepService.datas.slice();
        };
        var this_1 = this;
        var filterList, collectionName, valueToFilter, valueToKeep;
        for (var i = 0; i < this._stepService.steps.length; i++) {
            var state_1 = _loop_1(i);
            if (state_1 === "break") break;
        }
    };
    MainComponent.prototype.goToNextStep = function (stepIndex) {
        var _this = this;
        console.log(this._stepService);
        console.log(this._formService);
        console.log("GO NEXT STEP");
        console.log(this._stepService.steps);
        console.log(stepIndex);
        this.indexStepObj = stepIndex;
        console.log('currentStepId: ' + this.current_step_id);
        console.log("indexStepObj : " + this.indexStepObj);
        console.log('tmp_id : ' + this.tmp_id);
        console.log(this.datas);
        var nbSteps = this._stepService.steps.length;
        nbSteps = nbSteps - 1;
        if (this.indexStepObj == nbSteps) {
            console.log('save form');
            console.log(this._formService.arraySteps);
            this._saveService.saveFiles()
                .subscribe(function (data) {
                console.log('*****************************************************');
                console.log(data);
                var arrayFiles = [];
                for (var i in data) {
                    console.log(data[i]);
                    arrayFiles.push({ "fileName": data[i].step_name, "file_url": data[i].file_url });
                }
                if (arrayFiles.length > 0) {
                    _this._formService.arraySteps.push({ "fileDetails": arrayFiles });
                }
                console.log(_this._formService.arraySteps);
                _this._saveService.saveData(_this._stepService.steps[_this.indexStepObj].step_id, _this.appName)
                    .subscribe(function (data) {
                    _this.formCompleted = true;
                    if (typeof _this._stepService.steps[_this.indexStepObj].configuration.mail_id != 'undefined') {
                        console.log("SEND NOTIFICATION");
                        console.log(data._body);
                        _this._mailService.sendMail(_this._stepService.steps[_this.indexStepObj].configuration.mail_id, data._body, _this.appName)
                            .subscribe(function (mailState) {
                            console.log(mailState);
                        }, function (error) { return console.log(error); });
                        console.log(data._body);
                    }
                }, function (error) { return console.log(error); });
            }, function (error) { return console.log(error); });
        }
        else {
            var tmp_step_id = this.indexStepObj;
            this.indexStepObj++;
            console.log("stepId: " + this.stepId);
            console.log("indexStepObj: " + this.indexStepObj);
            console.log(this._stepService.steps[this.indexStepObj].step_id);
            if (this.indexStepObj > 1) {
                while (this._stepService.steps[this.indexStepObj].step_id == this.stepId) {
                    this.indexStepObj++;
                }
            }
            var condition = false;
            var _loop_2 = function() {
                console.log(this_2._stepService.steps[this_2.indexStepObj]);
                console.log(this_2._stepService.steps[this_2.indexStepObj].conditions);
                if (this_2._stepService.steps[this_2.indexStepObj].conditions.length == 0) {
                    console.log("pas de condition l'index " + this_2.indexStepObj);
                    condition = true;
                    return "break";
                }
                if (this_2._stepService.steps[this_2.indexStepObj].conditions.length == 1) {
                    console.log("1 condition dans step à l'index " + this_2.indexStepObj);
                    var keyCondition_1 = this_2._stepService.steps[this_2.indexStepObj].conditions[0].key;
                    var valueCondition_1 = this_2._stepService.steps[this_2.indexStepObj].conditions[0].value;
                    console.log("valueCondition: " + valueCondition_1);
                    console.log("keyCondition: " + keyCondition_1);
                    console.log(this_2._formService.arraySteps.find(function (x) { return x[keyCondition_1] === valueCondition_1; }));
                    if (typeof (this_2._formService.arraySteps.find(function (x) { return x[keyCondition_1] === valueCondition_1; })) != 'undefined') {
                        condition = true;
                        return "break";
                    }
                }
                if (this_2._stepService.steps[this_2.indexStepObj].conditions.length == 2) {
                    console.log("2 conditions dans step à l'index " + this_2.indexStepObj);
                    var keyCondition_2 = this_2._stepService.steps[this_2.indexStepObj].conditions[0].key;
                    var valueCondition_2 = this_2._stepService.steps[this_2.indexStepObj].conditions[0].value;
                    console.log(this_2._stepService.steps[this_2.indexStepObj]);
                    var keyCondition2_1 = this_2._stepService.steps[this_2.indexStepObj].conditions[1].key;
                    var valueCondition2_1 = this_2._stepService.steps[this_2.indexStepObj].conditions[1].value;
                    if (typeof (this_2._formService.arraySteps.find(function (x) { return x[keyCondition2_1] === valueCondition2_1; })) != 'undefined' && typeof (this_2._formService.arraySteps.find(function (x) { return x[keyCondition_2] === valueCondition_2; })) != 'undefined') {
                        condition = true;
                        return "break";
                    }
                }
                console.log(this_2._stepService.steps[this_2.indexStepObj].conditions);
                console.log(typeof (this_2._stepService.steps[this_2.indexStepObj].conditions));
                this_2.indexStepObj++;
            };
            var this_2 = this;
            while (condition == false) {
                var state_2 = _loop_2();
                if (state_2 === "break") break;
            }
            var tmpNewstepId = this._stepService.steps[this.indexStepObj].step_id;
            console.log("type component: " + this._stepService.steps[this.indexStepObj].type);
            switch (this._stepService.steps[this.indexStepObj].type) {
                case 'click_selection':
                    console.log("indexStepObj : " + this.indexStepObj);
                    console.log('tmp_id : ' + this.tmp_id);
                    console.log(this.datas);
                    if (typeof this._stepService.steps[this.indexStepObj].configuration.collection != 'undefined') {
                        console.log("GET DATA FROM COLLECTION");
                        var filterList = [];
                        var collectionName = this._stepService.steps[this.indexStepObj].configuration.collection.name;
                        console.log(this._stepService.steps[this.indexStepObj]);
                        var valueToFilter = this._stepService.steps[this.indexStepObj].configuration.collection.filter[0].step_id;
                        console.log(valueToFilter);
                        console.log(this._stepService.steps[this.indexStepObj].configuration.collection.filter[0].step_id);
                        console.log(this._formService);
                        filterList = this._stepService.steps[this.indexStepObj].configuration.collection.filter;
                        var valueToKeep = '';
                        if (typeof this._stepService.steps[this.indexStepObj].configuration.collection.value != 'undefined') {
                            valueToKeep = this._stepService.steps[this.indexStepObj].configuration.collection.value;
                        }
                        console.log(this.tmp_id);
                        this._collectionService.getDatas(collectionName, filterList, valueToKeep, 'btn')
                            .then(function (data) {
                            console.log(data);
                            _this.lists.push(data);
                            _this.datas.push({
                                "name": _this._stepService.steps[_this.indexStepObj].name,
                                "list": data,
                                "loaded": true
                            });
                            _this.previousStepId = _this.stepId;
                            console.log(_this.stepId);
                            console.log(_this.lists);
                            console.log(_this.datas);
                            _this.stepId = tmpNewstepId;
                            console.log("TEST IF ONLY 1 RECORD");
                            if (data.length == 1) {
                                console.log(_this.indexStepObj);
                                console.log(_this._formService.arraySteps[_this.indexStepObj]);
                                console.log(_this._stepService.steps[_this.indexStepObj].configuration.form_value.name);
                                console.log("data 0");
                                console.log(data[0]);
                                console.log(_this._formService.arraySteps[_this.indexStepObj][_this._stepService.steps[_this.indexStepObj].configuration.form_value.name]);
                                _this._formService.arraySteps[_this.indexStepObj][_this._stepService.steps[_this.indexStepObj].configuration.form_value.name] = data[0];
                                _this.goToNextStep(_this.indexStepObj);
                            }
                            console.log(_this.stepId);
                        }, function (error) { return console.log(error); });
                    }
                    if (typeof this._stepService.steps[this.indexStepObj].configuration.list != 'undefined') {
                        console.log("GET DATA FROM LIST");
                        console.log(this._stepService.steps[this.indexStepObj].configuration.list);
                        console.log(this._stepService.steps[this.indexStepObj].name);
                        this.datas.push({
                            "name": this._stepService.steps[this.indexStepObj].name,
                            "list": this._stepService.steps[this.indexStepObj].configuration.list
                        });
                        console.log(this._stepService.steps[this.indexStepObj]);
                        console.log(this.indexStepObj);
                        if (this._stepService.steps[this.indexStepObj].configuration.list.length == 1) {
                            console.log("1 SEULE VALEUR ALORS GO TO NEXT STEP");
                            this._formService.arraySteps[this.indexStepObj - 1][this._stepService.steps[this.indexStepObj].configuration.form_value.name] = this._stepService.steps[this.indexStepObj].configuration.list[0];
                            this.goToNextStep(this.indexStepObj);
                            break;
                        }
                        console.log(this.datas);
                        this.stepId = tmpNewstepId;
                    }
                    break;
                case 'image_selection':
                    if (typeof this._stepService.steps[this.indexStepObj].configuration.collection != 'undefined') {
                        console.log("GET DATA FROM COLLECTION");
                        var filterList_1 = [];
                        var collectionName_1 = this._stepService.steps[this.indexStepObj].configuration.collection.name;
                        console.log(collectionName_1);
                        console.log(this._stepService.steps[this.indexStepObj]);
                        if (typeof this._stepService.steps[this.indexStepObj].configuration.filter != 'undefined') {
                            var valueToFilter = this._stepService.steps[this.indexStepObj].configuration.collection.filter[0].step_id;
                            console.log(valueToFilter);
                            console.log(this._stepService.steps[this.indexStepObj].configuration.collection.filter[0].step_id);
                            console.log(this._formService);
                            filterList_1 = this._stepService.steps[this.indexStepObj].configuration.collection.filter;
                        }
                        var valueToKeep = '';
                        if (typeof this._stepService.steps[this.indexStepObj].configuration.collection.value != 'undefined') {
                            valueToKeep = this._stepService.steps[this.indexStepObj].configuration.collection.value;
                        }
                        console.log(valueToKeep);
                        console.log(this.tmp_id);
                        this._collectionService.getDatas(collectionName_1, filterList_1, valueToKeep, 'img_btn')
                            .then(function (data) {
                            console.log('service returns data');
                            console.log(data);
                            _this.lists.push(data);
                            for (var i in data) {
                                _this.datas.push({
                                    "name": data[i].name,
                                    "url": data[i].url,
                                    "list": data[i].list,
                                    "loaded": true
                                });
                            }
                            _this.previousStepId = _this.stepId;
                            console.log(_this.stepId);
                            console.log(_this.lists);
                            console.log(_this.datas);
                            _this.stepId = tmpNewstepId;
                            console.log("TEST IF ONLY 1 RECORD");
                            _this.dataLoaded = true;
                            if (data.length == 1) {
                                _this._formService.arraySteps[_this.indexStepObj][_this._stepService.steps[_this.indexStepObj].configuration.form_value.name] = data[0];
                                _this.goToNextStep(_this.indexStepObj);
                            }
                            console.log(_this.stepId);
                        }, function (error) { return console.log(error); });
                    }
                    if (typeof this._stepService.steps[this.indexStepObj].configuration.list != 'undefined') {
                        console.log("GET DATA FROM LIST");
                        this.lists.push(this._stepService.steps[this.indexStepObj].configuration.list);
                        this.datas.push({
                            "name": this._stepService.steps[this.indexStepObj].name,
                            "list": this._stepService.steps[this.indexStepObj].configuration.list
                        });
                        console.log(this.datas);
                        this.stepId = tmpNewstepId;
                    }
                    break;
                case 'field_panel':
                    console.log('field_panel');
                    this.stepId = tmpNewstepId;
                    break;
                case 'file_upload':
                    console.log("file_upload");
                    this.stepId = tmpNewstepId;
                    break;
                case 'multi_selection':
                    if (typeof this._stepService.steps[this.indexStepObj].configuration.list != 'undefined') {
                        console.log("IMAGE SELECTION - GET DATA FROM LIST ");
                        console.log(this._stepService.steps[this.indexStepObj].configuration.list);
                        console.log(this._stepService.steps[this.indexStepObj].name);
                        this.datas.push({
                            "name": this._stepService.steps[this.indexStepObj].name,
                            "list": this._stepService.steps[this.indexStepObj].configuration.list
                        });
                        console.log(this.datas);
                        this.stepId = tmpNewstepId;
                    }
                    break;
                default:
                    console.log('default');
            }
        }
        if (this.indexStepObj > -1) {
            if (typeof this._stepService.steps[this.indexStepObj].configuration.mail_id != "undefined") {
            }
        }
    };
    MainComponent.prototype.onValueSelected = function ($event) {
        console.log($event.valueSelected);
        console.log($event.valueName);
        console.log(this.indexStepObj);
        var tmpObj = {};
        tmpObj[$event.valueName] = $event.valueSelected;
        console.log(tmpObj);
        console.log($event.stepIdx);
        console.log(this._formService.arraySteps[$event.stepIdx]);
        console.log('XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX');
        console.log(this.indexStepObj);
        console.log(this._formService.arraySteps[this.indexStepObj]);
        console.log(this._formService.arraySteps);
        var keyToFind = $event.valueName;
        for (var key in this._formService.arraySteps) {
            for (var property in this._formService.arraySteps[key]) {
                console.log(this._formService.arraySteps[key].keyToFind);
                console.log("*****************************************************************");
                if (property == keyToFind) {
                    this._formService.arraySteps[key] = tmpObj;
                    break;
                }
                console.log(property);
            }
            console.log($event.valueName);
        }
        console.log("event.stepIdx: " + $event.stepIdx);
        console.log(tmpObj);
        this.goToNextStep($event.stepIdx);
    };
    MainComponent.prototype.onSubmitFile = function ($event) {
        console.log($event);
        console.log($event.fileUploaded);
        this._formService.arraySteps[this.indexStepObj].file_uploaded = $event.fileUploaded;
        this.goToNextStep($event.stepIdx);
    };
    MainComponent.prototype.onSubmitingFields = function ($event) {
        console.log('OnSubmitingFields');
        console.log($event.valueSelected[0]);
        console.log($event);
        this._formService.current_step_id = $event.stepId;
        for (var j = 0; j < this._formService.arraySteps.length; j++) {
            if (this._formService.arraySteps[j].nom == $event.name) {
                var tmpKeyName = $event.name;
                console.log("tmpKeyName: " + tmpKeyName);
                for (var i = 0; i < $event.valueSelected.length; i++) {
                    var keyObject = $event.valueName[i];
                    var newValue = $event.valueSelected[i];
                    console.log("keyObject: " + keyObject);
                    console.log("newValue: " + newValue);
                    this._formService.arraySteps[j][tmpKeyName][i][keyObject] = newValue;
                    console.log(this._formService.arraySteps[j][tmpKeyName][i][keyObject]);
                    console.log(' ');
                }
            }
        }
        console.log(this._formService.arraySteps);
        console.log(this._formService);
        this.goToNextStep($event.stepIdx);
    };
    MainComponent.prototype.getSelections = function ($event) {
        this._formService.arraySteps[$event.stepIdx][$event.valueName] = $event.valueSelected;
        this.goToNextStep($event.stepIdx);
    };
    MainComponent.prototype.changeLanguage = function (language) {
        this._stepService.language = language;
    };
    MainComponent = __decorate([
        core_1.Component({
            selector: 'vehicule-detail',
            template: "\n    <div *ngIf=\"formCompleted == false\" class=\"{{_stepService.template.panel_heading}}\">\n        <div class=\"row\">\n            <!--<div class=\"col-md-8\" *ngIf=\"this.stepId == 1 && this.appName !='play'\" >-->\n              <!--<button class=\"{{_stepService.template.back_btn}}\" ><i class=\"glyphicon glyphicon-triangle-left\" >  </i></button>-->\n            <!--</div>-->\n            <div class=\"col-md-8\" *ngIf=\"this.stepId == 1 && this.appName !='play'\"></div>\n            <div class=\"col-md-8\" *ngIf=\"this.stepId != 1 && this.appName !='play'\" align=\"left\" >\n                <previous-page \n                    [stepId] = \"stepId\"\n                    [idxStepObj] =  \"indexStepObj\"\n                    (change) = goPreviousStep($event) >\n                </previous-page>\n            </div>\n            <div class=\"col-md-4\" >\n\n                  <div class=\"pull-right\">\n                    <span style=\"width: 20px; height:20px;\" *ngFor=\"let language of _stepService.languages\">\n                         <button title=\"{{language}}\"   (click)=\"changeLanguage(language)\" type=\"button\" style=\"background-color: transparent; border-width: 0px 0 0;\">\n                            <img src=\"images/flags/{{language}}.png\" />\n                         </button>\n                    </span>\n                 </div>\n            </div>\n        </div>\n        <div class=\"row\">\n            <div align=\"center\" *ngIf=\"_stepService.steps[0].logo_url != ''\" >    \n                <img class=\"img-thumbnail\"  src=\"{{_stepService.steps[0].logo_url}}\" width=\"240\" height=\"160\">\n            </div>\n        </div>\n        <div class=\"row\" >\n        </div>\n </div>\n<div class=\"panel panel-default\" *ngIf=\"formCompleted == false\">\n   \n   <div *ngFor=\"let objStep of this._stepService.steps; let i = index\" >\n        <!-- IMAGE LIST BUTTON PANEL -->\n        <div *ngIf=\"objStep.type == 'image_selection' && dataLoaded \">\n            <panel-btn-img\n                *ngIf=\"stepId == objStep.step_id\"\n                    [objStep] = \"objStep\" \n                    [stepIdx]=\"i\"\n                    [valueSelected]=\"objStep.configuration.selection\"  \n                    [listOfElements]=\"this.datas\"\n                    (change)=\"onValueSelected($event)\">\n            </panel-btn-img>\n        </div>\n        \n        <!-- LIST BUTTON PANEL -->\n        <div *ngIf=\"objStep.type == 'click_selection'\">\n            <list-buttons          \n                *ngIf=\"stepId == objStep.step_id\"\n                    [objStep] = \"objStep\" \n                    [valueSelected]=\"objStep.configuration.selection\"\n                    [stepIdx]=\"i\"\n                    [listOfElements]=\"this.datas\"\n                    (change)=\"onValueSelected($event)\"\n            ></list-buttons>\n        </div>\n\n        <!-- MULTIPLE SELECTION LIST BUTTON-->\n        <div *ngIf=\"objStep.type == 'multi_selection'\">\n            <multi-selection\n                *ngIf=\"stepId == objStep.step_id\"\n                    [objStep] = \"objStep\" \n                    [valueSelected]=\"objStep.configuration.selection\"\n                    [stepIdx]=\"i\"\n                    [listOfElements]=\"this.datas\"\n                    [valuesSelected]=\"this.valuesSelected\"\n                    (change)=\"getSelections($event)\"         \n            ></multi-selection>        \n        </div>\n        \n        <!--- FIELD PANEL --->\n        <div *ngIf=\"objStep.type == 'field_panel'\">\n            <field-panel          \n                *ngIf=\"stepId == objStep.step_id\"\n                    [objStep] = \"objStep\"\n                    [stepIdx]=\"i\"\n                    (sent)=\"onSubmitingFields($event)\"\n            ></field-panel>\n        </div>\n        \n        <!--UPLOAD FILE PANEL --->\n        <div *ngIf=\"objStep.type == 'file_upload'\">\n            <file-upload          \n                *ngIf=\"stepId == objStep.step_id\"\n                    [objStep] = \"objStep\"\n                    [stepIdx]=\"i\"\n                    (sent)=\"onSubmitFile($event)\"\n            ></file-upload>\n        </div>\n </div>\n      <!--<progress class=\"progress progress-danger\" [attr.value]=\"progressBar\" max=\"100\" ></progress>-->\n      <!--<div class=\"progress\">-->\n  <!--<div class=\"progress-bar\" role=\"progressbar\" aria-valuenow=\"11\" aria-valuemin=\"3\" aria-valuemax=\"12\" style=\"min-width: 2em;\">-->\n    <!--0%-->\n  <!--</div>-->\n<!--</div>-->\n<save-button\n    *ngIf=\"this._stepService.steps[0].master_type == 'workflow'\"\n    (saveStep)=\"saveStep($event)\"\n    [stepId]=\"this.stepId\"\n    [app_name]=\"this.appName\"\n>\n\n</save-button>\n\n</div>\n\n <div align=\"center\" class=\"jumbotron\" *ngIf=\"formCompleted\" class=\"alert alert-success\" role=\"alert\">\n      <div class=\"container\">\n         <h1 *ngIf=\"_stepService.language == 'en'\" >Your application form has been sent correctly. Thank you very much. We will contact you shortly.</h1> \n         <h1 *ngIf=\"_stepService.language == 'es'\" >Su formulario de solicitud ha sido enviado correctamente. Muchas gracias. Nos pondremos en contacto con usted en breve.</h1>\n         <h1 *ngIf=\"_stepService.language == 'fr'\" >Votre demande a bien \u00E9t\u00E9 envoy\u00E9e, nous prendrons contact avec vous dans les plus brefs d\u00E9lais.</h1>         \n    </div>\n </div>\n",
            styles: [" nav{    \n            width: 150px;\n            float: left;\n            display: inline;\n            margin: 0;\n            padding: 0;\n            margin-right: 10px;\n            }"]
        }), 
        __metadata('design:paramtypes', [router_1.ActivatedRoute, forms_1.FormBuilder, form_service_1.FormService, step_service_1.StepService, collection_service_1.CollectionService, mail_service_1.MailService, saveService_1.SaveService])
    ], MainComponent);
    return MainComponent;
}());
exports.MainComponent = MainComponent;

//# sourceMappingURL=data:application/json;base64,
