"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var http_1 = require("@angular/http");
var fileUpload_service_1 = require("./fileUpload.service");
var form_service_1 = require("./form.service");
var FileUploadComponent = (function () {
    function FileUploadComponent(_fileUploadService, _http, _formService) {
        this._fileUploadService = _fileUploadService;
        this._http = _http;
        this._formService = _formService;
        this.isUploaded = false;
        this.uploadedFileUrls = [];
        this.display = false;
        this.sent = new core_1.EventEmitter();
    }
    FileUploadComponent.prototype.upload = function () {
    };
    FileUploadComponent.prototype.ngOnInit = function () {
        console.log(this.objStep);
        console.log(this.objStep.configuration.path_model);
    };
    FileUploadComponent.prototype.fileChange = function (event) {
        console.log(event.target);
        var fileList = event.target.files;
        if (fileList.length > 0) {
            var file = fileList[0];
            var formData = new FormData();
            this.fileUploaded = file;
            this._formService.arrayFiles.append('uploadFile', file, this.objStep.name);
            console.log(this._formService.arrayFiles.get('uploadFile'));
            this.url_uploaded_file = 'blabla';
            var fileToUpload = event.dataTransfer ? event.dataTransfer.files[0] : event.target.files[0];
            var pattern = /image-*/;
            var reader = new FileReader();
            if (!fileToUpload.type.match(pattern)) {
                alert('invalid format');
                return;
            }
            reader.onload = this._handleReaderLoaded.bind(this);
            reader.readAsDataURL(fileToUpload);
            this.isUploaded = true;
        }
    };
    FileUploadComponent.prototype._handleReaderLoaded = function (e) {
        var reader = e.target;
        this.imageSrc = reader.result;
    };
    FileUploadComponent.prototype.onChange = function (event) {
        var eventObj = event;
        var target = eventObj.target;
        var files = target.files;
        this.file = files[0];
        console.log(this.file);
        this._fileUploadService.storeFile(files[0])
            .subscribe(function (data) {
            console.log(data);
        }, function (error) { return console.log(error); });
    };
    FileUploadComponent.prototype.goToStep = function () {
        this.sent.emit({
            stepIdx: this.stepIdx
        });
    };
    FileUploadComponent.prototype.goToNextStep = function () {
        this.sent.emit({
            valueName: this.objStep.name,
            url_uploaded: this.url_uploaded_file,
            id_img: this.id_img,
            fileUploaded: this.fileUploaded,
            stepIdx: this.stepIdx
        });
    };
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], FileUploadComponent.prototype, "objStep", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], FileUploadComponent.prototype, "stepIdx", void 0);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', Object)
    ], FileUploadComponent.prototype, "sent", void 0);
    FileUploadComponent = __decorate([
        core_1.Component({
            selector: 'file-upload',
            template: "\n    <div>\n       <div class=\"panel-heading panel-heading-custom\">{{objStep.configuration.labelPanel}} </div>\n       <div class=\"panel-body\">\n        <!--<input type=\"filepicker\" name=\"myName\" onchange=\"alert(event.fpfile.url)\"/>-->\n        <!--<input type=\"file\" ng2FileSelect [uploader]=\"uploader\"/>-->\n        <table>\n            <tr>\n                <td>\n                    <input type=\"file\" (change)=\"fileChange($event)\" placeholder=\"Upload file\" accept=\".jpeg,.jpg,.png,.pdf,.doc,.docx\">\n                </td>\n            <tr>\n            <tr>\n                <td> \n                    <img src=\"{{objStep.configuration.path_model}}\" width=\"480\" height=\"320\"> \n                </td>\n            </tr>\n            <tr>\n                <td *ngIf=\"this.isUploaded\">\n                    <img src=\"{{imageSrc}}\" width=\"480\" height=\"320\">\n                    <!--<img src=\"{{this.url_uploaded_file}}\" width=\"480\" height=\"320\">    -->\n                </td>\n            </tr>\n            \n        \n        </table>\n               <div *ngIf=\"this.isUploaded == false\"><button type=\"button\" btn-default btn-lg (click)=\"goToStep()\">JE NE SOUHAITE PAS AJOUTER DES PHOTOS</button></div>\n               <div *ngIf=\"this.isUploaded\"><button type=\"button\" btn-default btn-lg (click)=\"goToNextStep()\">SUIVANT</button></div>\n        <!--<input name=\"file\" type=\"file\" (change)=\"onChange($event)\"/>-->\n        <!--<input type=\"filepicker\" data-fp-apikey=\"AgaXy7tWgRMuzr11Hh6OJz\"-->\n               <!--onchange=\"console.log(event.fpfile)\">-->\n\n      <!--<input type=\"file\" ng2FileSelect [uploader]=\"uploader\" accept=\"image/*;capture=camera\">-->\n\n    <!--<button (click)=\"upload()\">Upload</button>-->\n\n<!--<cl-image [public-id]=\"imageId\" [cloud-name]=\"uploader.cloudName\"></cl-image>-->\n<!--<input type=\"button\" value=\"Upload\" onclick=\"showPicker()\" />-->\n<!--<input type=\"filepicker-dragdrop\" data-fp-apikey=\"AgaXy7tWgRMuzr11Hh6OJz\" data-fp-mimetypes=\"*/*\" data-fp-container=\"modal\" data-fp-maxsize=\"10000000\" data-fp-store-location=\"S3\" onchange=\"alert(event.fpfile.url)\">-->\n       </div>\n    \n    </div>\n" }), 
        __metadata('design:paramtypes', [fileUpload_service_1.FileUploadService, (typeof (_a = typeof http_1.Http !== 'undefined' && http_1.Http) === 'function' && _a) || Object, form_service_1.FormService])
    ], FileUploadComponent);
    return FileUploadComponent;
    var _a;
}());
exports.FileUploadComponent = FileUploadComponent;

//# sourceMappingURL=data:application/json;base64,
