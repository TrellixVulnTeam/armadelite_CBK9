"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var http_1 = require("@angular/http");
var fileUpload_service_1 = require("./fileUpload.service");
var form_service_1 = require("./form.service");
var FileUploadComponent = (function () {
    function FileUploadComponent(_fileUploadService, _http, _formService) {
        this._fileUploadService = _fileUploadService;
        this._http = _http;
        this._formService = _formService;
        this.isUploaded = false;
        this.uploadedFileUrls = [];
        this.display = false;
        this.sent = new core_1.EventEmitter();
    }
    FileUploadComponent.prototype.upload = function () {
    };
    FileUploadComponent.prototype.ngOnInit = function () {
        console.log(this.objStep);
        console.log(this.objStep.configuration.path_model);
    };
    FileUploadComponent.prototype.fileChange = function (event) {
        console.log(event.target);
        var fileList = event.target.files;
        if (fileList.length > 0) {
            var file = fileList[0];
            var formData = new FormData();
            this.fileUploaded = file;
            this._formService.arrayFiles.append('uploadFile', file, this.objStep.name);
            console.log(this._formService.arrayFiles.get('uploadFile'));
            this.url_uploaded_file = 'blabla';
            var fileToUpload = event.dataTransfer ? event.dataTransfer.files[0] : event.target.files[0];
            var pattern = /image-*/;
            var reader = new FileReader();
            if (!fileToUpload.type.match(pattern)) {
                alert('invalid format');
                return;
            }
            reader.onload = this._handleReaderLoaded.bind(this);
            reader.readAsDataURL(fileToUpload);
            this.isUploaded = true;
        }
    };
    FileUploadComponent.prototype._handleReaderLoaded = function (e) {
        var reader = e.target;
        this.imageSrc = reader.result;
    };
    FileUploadComponent.prototype.onChange = function (event) {
        var eventObj = event;
        var target = eventObj.target;
        var files = target.files;
        this.file = files[0];
        console.log(this.file);
        this._fileUploadService.storeFile(files[0])
            .subscribe(function (data) {
            console.log(data);
        }, function (error) { return console.log(error); });
    };
    FileUploadComponent.prototype.goToStep = function () {
        this.sent.emit({
            stepIdx: this.stepIdx
        });
    };
    FileUploadComponent.prototype.goToNextStep = function () {
        this.sent.emit({
            valueName: this.objStep.name,
            url_uploaded: this.url_uploaded_file,
            id_img: this.id_img,
            fileUploaded: this.fileUploaded,
            stepIdx: this.stepIdx
        });
    };
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], FileUploadComponent.prototype, "objStep", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], FileUploadComponent.prototype, "stepIdx", void 0);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', Object)
    ], FileUploadComponent.prototype, "sent", void 0);
    FileUploadComponent = __decorate([
        core_1.Component({
            selector: 'file-upload',
            template: "\n    <div>\n       <div class=\"panel-heading panel-heading-custom\"><p class=\"text-uppercase\">{{objStep.configuration.labelPanel}}</p> </div>\n       <div class=\"panel-body\">\n        <!--<input type=\"filepicker\" name=\"myName\" onchange=\"alert(event.fpfile.url)\"/>-->\n        <!--<input type=\"file\" ng2FileSelect [uploader]=\"uploader\"/>-->\n        <table>\n            <tr>\n                <td>\n                    <input type=\"file\" (change)=\"fileChange($event)\" placeholder=\"Upload file\" accept=\".jpeg,.jpg,.png,.pdf,.doc,.docx\">\n                </td>\n            <tr>\n            <tr>\n                <td> \n                    <img src=\"{{objStep.configuration.path_model}}\" width=\"480\" height=\"320\"> \n                </td>\n            </tr>\n            <tr>\n                <td *ngIf=\"this.isUploaded\">\n                    <img src=\"{{imageSrc}}\" width=\"480\" height=\"320\">\n                    <!--<img src=\"{{this.url_uploaded_file}}\" width=\"480\" height=\"320\">    -->\n                </td>\n            </tr>\n            \n        \n        </table>\n               <div *ngIf=\"this.isUploaded == false\"><button type=\"button\" btn-default btn-lg (click)=\"goToStep()\">JE NE SOUHAITE PAS AJOUTER DES PHOTOS</button></div>\n               <div *ngIf=\"this.isUploaded\"><button type=\"button\" btn-default btn-lg (click)=\"goToNextStep()\">SUIVANT</button></div>\n        <!--<input name=\"file\" type=\"file\" (change)=\"onChange($event)\"/>-->\n        <!--<input type=\"filepicker\" data-fp-apikey=\"AgaXy7tWgRMuzr11Hh6OJz\"-->\n               <!--onchange=\"console.log(event.fpfile)\">-->\n\n      <!--<input type=\"file\" ng2FileSelect [uploader]=\"uploader\" accept=\"image/*;capture=camera\">-->\n\n    <!--<button (click)=\"upload()\">Upload</button>-->\n\n<!--<cl-image [public-id]=\"imageId\" [cloud-name]=\"uploader.cloudName\"></cl-image>-->\n<!--<input type=\"button\" value=\"Upload\" onclick=\"showPicker()\" />-->\n<!--<input type=\"filepicker-dragdrop\" data-fp-apikey=\"AgaXy7tWgRMuzr11Hh6OJz\" data-fp-mimetypes=\"*/*\" data-fp-container=\"modal\" data-fp-maxsize=\"10000000\" data-fp-store-location=\"S3\" onchange=\"alert(event.fpfile.url)\">-->\n       </div>\n    \n    </div>\n" }), 
        __metadata('design:paramtypes', [fileUpload_service_1.FileUploadService, (typeof (_a = typeof http_1.Http !== 'undefined' && http_1.Http) === 'function' && _a) || Object, form_service_1.FormService])
    ], FileUploadComponent);
    return FileUploadComponent;
    var _a;
}());
exports.FileUploadComponent = FileUploadComponent;

//# sourceMappingURL=data:application/json;base64,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QyxhQUFNLEVBQUU7O3FEQUFBO0lBL0RiO1FBQUMsZ0JBQVMsQ0FBQztZQUNQLFFBQVEsRUFBRSxhQUFhO1lBQ3ZCLFFBQVEsRUFBRSw4dEVBMENiLEVBQUMsQ0FBQzs7MkJBQUE7SUF5SkgsMEJBQUM7O0FBQUQsQ0F2SkEsQUF1SkMsSUFBQTtBQXZKWSwyQkFBbUIsc0JBdUovQixDQUFBIiwiZmlsZSI6ImNvbXBvbmVudHMvZmlsZVVwbG9hZC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29tcG9uZW50LCBJbnB1dCwgT3V0cHV0LCBFdmVudEVtaXR0ZXJ9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG4vLyBpbXBvcnQge0ZpbGVVcGxvYWRTZXJ2aWNlfSBmcm9tIFwiLi9maWxlVXBsb2FkLnNlcnZpY2VcIjtcbmltcG9ydCB7SHR0cCwgUmVxdWVzdE9wdGlvbnMsIEhlYWRlcnN9IGZyb20gXCJAYW5ndWxhci9odHRwXCI7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSBcInJ4anMvT2JzZXJ2YWJsZVwiO1xuaW1wb3J0IHsgQ2xvdWRpbmFyeU9wdGlvbnMsIENsb3VkaW5hcnlVcGxvYWRlciB9IGZyb20gJ25nMi1jbG91ZGluYXJ5JztcbmltcG9ydCB7RmlsZVVwbG9hZFNlcnZpY2V9IGZyb20gXCIuL2ZpbGVVcGxvYWQuc2VydmljZVwiO1xuaW1wb3J0IHtHbG9iYWxWYXJpYWJsZX0gZnJvbSBcIi4uL2dsb2JhbFwiO1xuaW1wb3J0IHtGb3JtU2VydmljZX0gZnJvbSBcIi4vZm9ybS5zZXJ2aWNlXCI7XG5kZWNsYXJlIGNvbnN0IGZpbGVzdGFjazoge1xuICAgIGluaXQoYXBpS2V5OiBzdHJpbmcpOiB7XG4gICAgICAgIHBpY2soeyBtYXhGaWxlcyB9OiB7IG1heEZpbGVzOiBudW1iZXIgfSk6XG4gICAgICAgICAgICBQcm9taXNlPHsgZmlsZXNVcGxvYWRlZDogeyB1cmw6IHN0cmluZyB9W10gfT5cbiAgICB9XG59O1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2ZpbGUtdXBsb2FkJyxcbiAgICB0ZW1wbGF0ZTogYFxuICAgIDxkaXY+XG4gICAgICAgPGRpdiBjbGFzcz1cInBhbmVsLWhlYWRpbmcgcGFuZWwtaGVhZGluZy1jdXN0b21cIj48cCBjbGFzcz1cInRleHQtdXBwZXJjYXNlXCI+e3tvYmpTdGVwLmNvbmZpZ3VyYXRpb24ubGFiZWxQYW5lbH19PC9wPiA8L2Rpdj5cbiAgICAgICA8ZGl2IGNsYXNzPVwicGFuZWwtYm9keVwiPlxuICAgICAgICA8IS0tPGlucHV0IHR5cGU9XCJmaWxlcGlja2VyXCIgbmFtZT1cIm15TmFtZVwiIG9uY2hhbmdlPVwiYWxlcnQoZXZlbnQuZnBmaWxlLnVybClcIi8+LS0+XG4gICAgICAgIDwhLS08aW5wdXQgdHlwZT1cImZpbGVcIiBuZzJGaWxlU2VsZWN0IFt1cGxvYWRlcl09XCJ1cGxvYWRlclwiLz4tLT5cbiAgICAgICAgPHRhYmxlPlxuICAgICAgICAgICAgPHRyPlxuICAgICAgICAgICAgICAgIDx0ZD5cbiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJmaWxlXCIgKGNoYW5nZSk9XCJmaWxlQ2hhbmdlKCRldmVudClcIiBwbGFjZWhvbGRlcj1cIlVwbG9hZCBmaWxlXCIgYWNjZXB0PVwiLmpwZWcsLmpwZywucG5nLC5wZGYsLmRvYywuZG9jeFwiPlxuICAgICAgICAgICAgICAgIDwvdGQ+XG4gICAgICAgICAgICA8dHI+XG4gICAgICAgICAgICA8dHI+XG4gICAgICAgICAgICAgICAgPHRkPiBcbiAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9XCJ7e29ialN0ZXAuY29uZmlndXJhdGlvbi5wYXRoX21vZGVsfX1cIiB3aWR0aD1cIjQ4MFwiIGhlaWdodD1cIjMyMFwiPiBcbiAgICAgICAgICAgICAgICA8L3RkPlxuICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgIDx0cj5cbiAgICAgICAgICAgICAgICA8dGQgKm5nSWY9XCJ0aGlzLmlzVXBsb2FkZWRcIj5cbiAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9XCJ7e2ltYWdlU3JjfX1cIiB3aWR0aD1cIjQ4MFwiIGhlaWdodD1cIjMyMFwiPlxuICAgICAgICAgICAgICAgICAgICA8IS0tPGltZyBzcmM9XCJ7e3RoaXMudXJsX3VwbG9hZGVkX2ZpbGV9fVwiIHdpZHRoPVwiNDgwXCIgaGVpZ2h0PVwiMzIwXCI+ICAgIC0tPlxuICAgICAgICAgICAgICAgIDwvdGQ+XG4gICAgICAgICAgICA8L3RyPlxuICAgICAgICAgICAgXG4gICAgICAgIFxuICAgICAgICA8L3RhYmxlPlxuICAgICAgICAgICAgICAgPGRpdiAqbmdJZj1cInRoaXMuaXNVcGxvYWRlZCA9PSBmYWxzZVwiPjxidXR0b24gdHlwZT1cImJ1dHRvblwiIGJ0bi1kZWZhdWx0IGJ0bi1sZyAoY2xpY2spPVwiZ29Ub1N0ZXAoKVwiPkpFIE5FIFNPVUhBSVRFIFBBUyBBSk9VVEVSIERFUyBQSE9UT1M8L2J1dHRvbj48L2Rpdj5cbiAgICAgICAgICAgICAgIDxkaXYgKm5nSWY9XCJ0aGlzLmlzVXBsb2FkZWRcIj48YnV0dG9uIHR5cGU9XCJidXR0b25cIiBidG4tZGVmYXVsdCBidG4tbGcgKGNsaWNrKT1cImdvVG9OZXh0U3RlcCgpXCI+U1VJVkFOVDwvYnV0dG9uPjwvZGl2PlxuICAgICAgICA8IS0tPGlucHV0IG5hbWU9XCJmaWxlXCIgdHlwZT1cImZpbGVcIiAoY2hhbmdlKT1cIm9uQ2hhbmdlKCRldmVudClcIi8+LS0+XG4gICAgICAgIDwhLS08aW5wdXQgdHlwZT1cImZpbGVwaWNrZXJcIiBkYXRhLWZwLWFwaWtleT1cIkFnYVh5N3RXZ1JNdXpyMTFIaDZPSnpcIi0tPlxuICAgICAgICAgICAgICAgPCEtLW9uY2hhbmdlPVwiY29uc29sZS5sb2coZXZlbnQuZnBmaWxlKVwiPi0tPlxuXG4gICAgICA8IS0tPGlucHV0IHR5cGU9XCJmaWxlXCIgbmcyRmlsZVNlbGVjdCBbdXBsb2FkZXJdPVwidXBsb2FkZXJcIiBhY2NlcHQ9XCJpbWFnZS8qO2NhcHR1cmU9Y2FtZXJhXCI+LS0+XG5cbiAgICA8IS0tPGJ1dHRvbiAoY2xpY2spPVwidXBsb2FkKClcIj5VcGxvYWQ8L2J1dHRvbj4tLT5cblxuPCEtLTxjbC1pbWFnZSBbcHVibGljLWlkXT1cImltYWdlSWRcIiBbY2xvdWQtbmFtZV09XCJ1cGxvYWRlci5jbG91ZE5hbWVcIj48L2NsLWltYWdlPi0tPlxuPCEtLTxpbnB1dCB0eXBlPVwiYnV0dG9uXCIgdmFsdWU9XCJVcGxvYWRcIiBvbmNsaWNrPVwic2hvd1BpY2tlcigpXCIgLz4tLT5cbjwhLS08aW5wdXQgdHlwZT1cImZpbGVwaWNrZXItZHJhZ2Ryb3BcIiBkYXRhLWZwLWFwaWtleT1cIkFnYVh5N3RXZ1JNdXpyMTFIaDZPSnpcIiBkYXRhLWZwLW1pbWV0eXBlcz1cIiovKlwiIGRhdGEtZnAtY29udGFpbmVyPVwibW9kYWxcIiBkYXRhLWZwLW1heHNpemU9XCIxMDAwMDAwMFwiIGRhdGEtZnAtc3RvcmUtbG9jYXRpb249XCJTM1wiIG9uY2hhbmdlPVwiYWxlcnQoZXZlbnQuZnBmaWxlLnVybClcIj4tLT5cbiAgICAgICA8L2Rpdj5cbiAgICBcbiAgICA8L2Rpdj5cbmB9KVxuXG5leHBvcnQgY2xhc3MgRmlsZVVwbG9hZENvbXBvbmVudCB7XG5cbiAgICBpc1VwbG9hZGVkID0gZmFsc2U7XG4gICAgaWRfaW1nOiBzdHJpbmc7XG4gICAgdXJsX3VwbG9hZGVkX2ZpbGU7XG5cbiAgICB1cGxvYWRlZEZpbGVVcmxzOiBzdHJpbmdbXSA9IFtdO1xuICAgIGltYWdlU3JjOiBzdHJpbmc7XG4gICAgY2xvdWRpbmFyeUltYWdlOiBhbnk7XG4gICAgZGlzcGxheSA9IGZhbHNlO1xuICAgICAvLyB1cGxvYWRlcjogQ2xvdWRpbmFyeVVwbG9hZGVyID0gbmV3IENsb3VkaW5hcnlVcGxvYWRlcihcbiAgICAgLy8gICAgIG5ldyBDbG91ZGluYXJ5T3B0aW9ucyh7IGNsb3VkTmFtZTogJ2hhdmpjcXBwdicsIHVwbG9hZFByZXNldDogJ29pMng2MWRiJyB9KVxuICAgICAvLyApO1xuICAgIGZpbGUgOiBGaWxlO1xuICAgIGZpbGVVcGxvYWRlZCA6IEZpbGU7XG4gICAgQElucHV0KCkgb2JqU3RlcDsgICAgIC8vVmFsdWUgcmVjZWl2ZWQgZnJvbSBNYWluQ29tcG9uZW50XG4gICAgQElucHV0KCkgc3RlcElkeDsgICAgIC8vVmFsdWUgcmVjZWl2ZWQgZnJvbSBNYWluQ29tcG9uZW50XG4gICAgQE91dHB1dCgpIHNlbnQgPSBuZXcgRXZlbnRFbWl0dGVyKCk7IC8vIEVtaXR0ZXIgdG8gc2VuZCBiYWNrIGRhdGEgdG8gcGFyZW50IGNvbXBvbmVudFxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgX2ZpbGVVcGxvYWRTZXJ2aWNlIDogRmlsZVVwbG9hZFNlcnZpY2UsIHByaXZhdGUgX2h0dHA6IEh0dHAsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBfZm9ybVNlcnZpY2U6IEZvcm1TZXJ2aWNlKSB7XG4gICAgICAgIC8vICAsIHRoaXMudXBsb2FkZXIub25TdWNjZXNzSXRlbSA9IChpdGVtOiBhbnksIHJlc3BvbnNlOiBzdHJpbmcsIHN0YXR1czogbnVtYmVyLCBoZWFkZXJzOiBhbnkpID0+IHtcbiAgICAgICAgLy8gICAgIC8vcmVzcG9uc2UgaXMgdGhlIGNsb3VkaW5hcnkgcmVzcG9uc2VcbiAgICAgICAgLy8gICAgIC8vc2VlIGh0dHA6Ly9jbG91ZGluYXJ5LmNvbS9kb2N1bWVudGF0aW9uL3VwbG9hZF9pbWFnZXMjdXBsb2FkX3Jlc3BvbnNlXG4gICAgICAgIC8vICAgICBsZXQgcmVzOiBhbnkgPSBKU09OLnBhcnNlKHJlc3BvbnNlKTtcbiAgICAgICAgLy8gICAgIHRoaXMuaW1hZ2VJZCA9IHJlcy5wdWJsaWNfaWQ7XG4gICAgICAgIC8vICAgICByZXR1cm4geyBpdGVtLCByZXNwb25zZSwgc3RhdHVzLCBoZWFkZXJzIH07XG4gICAgICAgIC8vIH07XG5cbiAgICB9XG5cblxuICAgIHVwbG9hZCgpIHtcbiAgICAgICAgLy8gdGhpcy51cGxvYWRlci51cGxvYWRBbGwoKTtcbiAgICB9XG4gICAgIG5nT25Jbml0KCkge1xuICAgICAgICBjb25zb2xlLmxvZyh0aGlzLm9ialN0ZXApO1xuICAgICAgICBjb25zb2xlLmxvZyh0aGlzLm9ialN0ZXAuY29uZmlndXJhdGlvbi5wYXRoX21vZGVsKVxuICAgICB9XG4gICAgICAgIC8vXG4gICAgLy9cbiAgICAvL1xuICAgIC8vICAgICAvLyB2YXIgY2xpZW50ID0gZmlsZXN0YWNrLmluaXQoJ0FnYVh5N3RXZ1JNdXpyMTFIaDZPSnonKTtcbiAgICAvLyAgICAgLy8gZnVuY3Rpb24gc2hvd1BpY2tlcigpIHtcbiAgICAvLyAgICAgLy8gICAgIGNsaWVudC5waWNrKHtcbiAgICAvLyAgICAgLy8gICAgIH0pLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgLy8gICAgIC8vICAgICAgICAgY29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkocmVzdWx0LmZpbGVzVXBsb2FkZWQpKVxuICAgIC8vICAgICAvLyAgICAgfSk7XG4gICAgLy8gICAgIC8vIH1cbiAgICAvLyB9XG4gICAgLy9cblxuICAgIGZpbGVDaGFuZ2UoZXZlbnQpIHtcbiAgICBjb25zb2xlLmxvZyhldmVudC50YXJnZXQpO1xuICAvLyBHQVJERVIgRklDSElFUiBEQU5TIExFIENBQ0hFXG5cbiAgICAgICAgIGxldCBmaWxlTGlzdDogRmlsZUxpc3QgPSBldmVudC50YXJnZXQuZmlsZXM7XG4gICAgIGlmKGZpbGVMaXN0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgIGxldCBmaWxlOiBGaWxlID0gZmlsZUxpc3RbMF07XG4gICAgICAgICBsZXQgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTtcblxuICAgICAgICAgdGhpcy5maWxlVXBsb2FkZWQgPSBmaWxlO1xuICAgICAgICAgdGhpcy5fZm9ybVNlcnZpY2UuYXJyYXlGaWxlcy5hcHBlbmQoJ3VwbG9hZEZpbGUnLCBmaWxlLCB0aGlzLm9ialN0ZXAubmFtZSk7XG4gICAgICAgICBjb25zb2xlLmxvZyh0aGlzLl9mb3JtU2VydmljZS5hcnJheUZpbGVzLmdldCgndXBsb2FkRmlsZScpKTtcblxuICAgICAgICAgdGhpcy51cmxfdXBsb2FkZWRfZmlsZSA9ICdibGFibGEnO1xuICAgICAgICAgLy9cbiAgICAgICAgIHZhciBmaWxlVG9VcGxvYWQgPSBldmVudC5kYXRhVHJhbnNmZXIgPyBldmVudC5kYXRhVHJhbnNmZXIuZmlsZXNbMF0gOiBldmVudC50YXJnZXQuZmlsZXNbMF07XG5cbiAgICAgICAgIHZhciBwYXR0ZXJuID0gL2ltYWdlLSovO1xuICAgICAgICAgdmFyIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XG5cbiAgICAgICAgIGlmICghZmlsZVRvVXBsb2FkLnR5cGUubWF0Y2gocGF0dGVybikpIHtcbiAgICAgICAgICAgICBhbGVydCgnaW52YWxpZCBmb3JtYXQnKTtcbiAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICB9XG5cbiAgICAgICAgIC8vIHRoaXMubG9hZGVkID0gZmFsc2U7XG5cbiAgICAgICAgIHJlYWRlci5vbmxvYWQgPSB0aGlzLl9oYW5kbGVSZWFkZXJMb2FkZWQuYmluZCh0aGlzKTtcbiAgICAgICAgIHJlYWRlci5yZWFkQXNEYXRhVVJMKGZpbGVUb1VwbG9hZCk7XG4vLyBGSU4gR0FSREVSIEZJQ0hJRVIgREFOUyBMRSBDQUNIRVxuXG4gICAgICAgICAvLyB0aGlzLl9mb3JtU2VydmljZS5hcnJheVN0ZXBzLnB1c2goe1wibm9tXCI6IHRoaXMub2JqU3RlcC5uYW1lLCBcImZpbGVcIjogRmlsZX0pO1xuICAgICAgICAgLy90aGlzLl9mb3JtU2VydmljZS5hcnJheUZpbGVzLnB1c2goZm9ybURhdGEpO1xuXG5cbiAgICAgICAgIHRoaXMuaXNVcGxvYWRlZCA9IHRydWU7XG5cbiAgICAgICAgIC8vIGxldCBoZWFkZXJzID0gbmV3IEhlYWRlcnMoKTtcbiAgICAgICAgIC8vIGhlYWRlcnMuYXBwZW5kKCdFbmNUeXBlJywgJ211bHRpcGFydC9mb3JtLWRhdGEnKTtcbiAgICAgICAgIC8vIGhlYWRlcnMuYXBwZW5kKCdBY2NlcHQnLCAnYXBwbGljYXRpb24vanNvbicpO1xuICAgICAgICAgLy8gbGV0IG9wdGlvbnMgPSBuZXcgUmVxdWVzdE9wdGlvbnMoe2hlYWRlcnM6IGhlYWRlcnN9KTtcbiAgICAgICAgIC8vIHZhciBjb21wbGV0ZVVybCA9IEdsb2JhbFZhcmlhYmxlLkJBU0VfVVJMICsgJ3N0b3JlX2ZpbGUnO1xuICAgICAgICAgLy8gdGhpcy5faHR0cC5wb3N0KGAke2NvbXBsZXRlVXJsfWAsIGZvcm1EYXRhLCB7aGVhZGVyczogaGVhZGVyc30pXG4gICAgICAgICAvLyAgICAgLm1hcChyZXMgPT4gcmVzLmpzb24oKSlcbiAgICAgICAgIC8vICAgICAuY2F0Y2goZXJyb3IgPT4gT2JzZXJ2YWJsZS50aHJvdyhlcnJvcikpXG4gICAgICAgICAvLyAgICAgLnN1YnNjcmliZShcbiAgICAgICAgIC8vICAgICAgICAgZGF0YSA9PiB7XG4gICAgICAgICAvLyAgICAgICAgICAgICBjb25zb2xlLmxvZygnc3VjY2VzcycpXG4gICAgICAgICAvLyAgICAgICAgICAgICB0aGlzLnVybF91cGxvYWRlZF9maWxlID0gZGF0YS51cmw7XG4gICAgICAgICAvLyAgICAgICAgICAgICB0aGlzLmlkX2ltZyA9IGRhdGEuaWRfaW1nO1xuICAgICAgICAgLy8gICAgICAgICB9LFxuICAgICAgICAgLy8gICAgICAgICBlcnJvciA9PiBjb25zb2xlLmxvZyhlcnJvcilcbiAgICAgICAgIC8vICAgICApXG4gICAgIH0gICAgICAgIH1cblxuX2hhbmRsZVJlYWRlckxvYWRlZChlKSB7XG4gICAgdmFyIHJlYWRlciA9IGUudGFyZ2V0O1xuICAgIHRoaXMuaW1hZ2VTcmMgPSByZWFkZXIucmVzdWx0O1xuICAgLy8gY29uc29sZS5sb2codGhpcy5pbWFnZVNyYylcbiAgICAvL3RoaXMubG9hZGVkID0gdHJ1ZTtcbn1cblxuICAgIG9uQ2hhbmdlKGV2ZW50OiBFdmVudFRhcmdldCkge1xuICAgICAgICBsZXQgZXZlbnRPYmo6IE1TSW5wdXRNZXRob2RDb250ZXh0ID0gPE1TSW5wdXRNZXRob2RDb250ZXh0PiBldmVudDtcbiAgICAgICAgbGV0IHRhcmdldDogSFRNTElucHV0RWxlbWVudCA9IDxIVE1MSW5wdXRFbGVtZW50PiBldmVudE9iai50YXJnZXQ7XG4gICAgICAgIGxldCBmaWxlczogRmlsZUxpc3QgPSB0YXJnZXQuZmlsZXM7XG4gICAgICAgIHRoaXMuZmlsZSA9IGZpbGVzWzBdO1xuICAgICAgICBjb25zb2xlLmxvZyh0aGlzLmZpbGUpO1xuXG4gICAgICAgIHRoaXMuX2ZpbGVVcGxvYWRTZXJ2aWNlLnN0b3JlRmlsZShmaWxlc1swXSlcbiAgICAgICAgICAgIC5zdWJzY3JpYmUoZGF0YSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGRhdGEpXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlcnJvciA9PiBjb25zb2xlLmxvZyhlcnJvcilcbiAgICAgICAgICAgIClcbiAgICB9XG5cbiAgICBnb1RvU3RlcCgpe1xuICAgICAgICB0aGlzLnNlbnQuZW1pdCh7XG4gICAgICAgICAgICBzdGVwSWR4OiB0aGlzLnN0ZXBJZHhcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBnb1RvTmV4dFN0ZXAoKSB7XG4gICAgICAgIHRoaXMuc2VudC5lbWl0KHtcbiAgICAgICAgICAgIHZhbHVlTmFtZSA6IHRoaXMub2JqU3RlcC5uYW1lLFxuICAgICAgICAgICAgdXJsX3VwbG9hZGVkOiB0aGlzLnVybF91cGxvYWRlZF9maWxlLFxuICAgICAgICAgICAgaWRfaW1nOiB0aGlzLmlkX2ltZyxcbiAgICAgICAgICAgIGZpbGVVcGxvYWRlZDogdGhpcy5maWxlVXBsb2FkZWQsXG4gICAgICAgICAgICBzdGVwSWR4IDogdGhpcy5zdGVwSWR4XG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgLy9cbiAgICAvLyBhc3luYyBzaG93UGlja2VyKCkge1xuICAgIC8vICAgICBjb25zdCBjbGllbnQgPSBmaWxlc3RhY2suaW5pdCgnQWdhWHk3dFdnUk11enIxMUhoNk9KeicpO1xuICAgIC8vICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBjbGllbnQucGljayh7IG1heEZpbGVzOiAxIH0pO1xuICAgIC8vICAgICBjb25zdCB1cmwgPSByZXN1bHQuZmlsZXNVcGxvYWRlZFswXS51cmw7XG4gICAgLy8gICAgIHRoaXMudXBsb2FkZWRGaWxlVXJscy5wdXNoKHVybCk7XG4gICAgLy8gfVxufSJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
