"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('@angular/core');
var grid_service_1 = require("./grid.service");
var router_1 = require('@angular/router');
var step_service_1 = require("../Engine/step.service");
var http_1 = require("@angular/http");
var export_service_1 = require("./export.service");
var GridPanelComponent = (function () {
    function GridPanelComponent(_stepService, _gridService, router, route, _http, _exportService) {
        this._stepService = _stepService;
        this._gridService = _gridService;
        this.router = router;
        this.route = route;
        this._http = _http;
        this._exportService = _exportService;
        this.display = false;
        this.myListData = [];
        this.keysName = [];
        this.showInput = [];
        this.filterActivated = false;
        this.master = "";
        this.app_name = "";
    }
    GridPanelComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.grid_name = this.route.snapshot.queryParams["grid_name"];
        this.master = this.route.snapshot.queryParams["master"];
        this.app_name = this.route.snapshot.queryParams["app_name"];
        console.log(this.app_name);
        console.log(this.master);
        if (this.master != '') {
            this._gridService.getDatas(this.grid_name, this.master)
                .subscribe(function (data) {
                console.log(data);
                console.log(_this._gridService);
            }, function (error) { return console.log(error); });
        }
        else {
            this._gridService.getDatas(this.grid_name, '')
                .subscribe(function (data) {
                console.log(data);
                console.log(_this._gridService);
            }, function (error) { return console.log(error); });
        }
        for (var i = 0; i < this._gridService.colTitle.length; i++) {
            this.showInput.push(false);
        }
        this.myListData = this._gridService.dataGrid;
        this.keysName = this._gridService.keysName;
        console.log(this._gridService.keysName);
        console.log(this._gridService);
        this.display = true;
    };
    GridPanelComponent.prototype.goToCurrentStep = function (item) {
        console.log(item);
        var navigationExtras = {
            queryParams: { 'current_id': item.step_id, '_id': item._id }
        };
        this.router.navigate(['/step'], navigationExtras);
    };
    GridPanelComponent.prototype.isObject = function (item) {
        return (typeof item === "object" && !Array.isArray(item) && item !== null);
    };
    GridPanelComponent.prototype.showFilterInput = function (idx) {
        if (this.showInput[idx] == true) {
            this.showInput[idx] = false;
        }
        else {
            this.showInput[idx] = true;
        }
    };
    GridPanelComponent.prototype.checkUndefined = function (value) {
        console.log(value);
        console.log(typeof value === 'undefined');
        return (typeof value === 'undefined');
    };
    GridPanelComponent.prototype.updateCheckBox = function ($event, item) {
        var value = $event.target.checked;
        console.log(item);
        console.log($event.target);
        var fieldName = $event.target.name;
        console.log(this.master);
        this._gridService.updateCheckbox(value, item._id, this.master, this.app_name, fieldName)
            .subscribe(function (data) { return console.log(data); }, function (error) { return console.log(error); });
    };
    GridPanelComponent.prototype.changeCourse = function ($event, id) {
        var course_type = $event.target.value;
        this._gridService.changeCourse(course_type, id)
            .subscribe(function (data) {
        }, function (error) { return console.log(error); });
    };
    GridPanelComponent.prototype.filter = function (event) {
        console.log(event.target);
        console.log("passe par grid cmp");
        console.log(event);
        console.log(this._gridService.dataGrid);
        this._gridService.filterData(event.target.value, event.srcElement.id);
    };
    GridPanelComponent.prototype.exportExcel = function () {
        this.grid_name;
        this.master;
        console.log(this._gridService.dataGrid);
        this._exportService.toExcel(this.grid_name, this.master)
            .subscribe(function (data) { return console.log(data); }, function (error) { return console.log(error); });
    };
    GridPanelComponent = __decorate([
        core_1.Component({
            selector: 'grid-panel',
            template: "\n             \n               \n               \n               <div class=\"panel-heading panel-heading-custom\" align=\"center\">\n                 <div  class=\"row\" align=\"left\">\n                  <div class=\"col-md-2\">\n                    <nav class=\"form-navArrow\">\n                       <!--<a [routerLink]=\"['/menu']\" [queryParams]=\"{'firstLoad': false}\">-->\n                       <a [routerLink]=\"['/home']\" [queryParams]=\"{'app': 'ballet', 'master': master, 'premenu': 1}\" >\n                           <button class=\"btn btn-warning\"><i class=\"glyphicon glyphicon-triangle-left\" ></i>BACK</button></a>\n                    </nav>\n                  </div>\n                 <div class=\"col-md-10\" align=\"center\">\n                     <h2 *ngIf=\"master != ''\">{{master}}</h2>\n                     <h3>{{grid_name}}</h3>\n                 </div>\n               </div>\n               <div><button (click)=\"exportExcel()\">Export excel</button></div>\n               </div>\n                <div class=\"panel-body\">\n               <div class=\"table-responsive\" *ngIf=\"display\">\n                    <table class=\"table table-hover table-condensed\"  >\n                        <tr>\n                            <th *ngFor=\"let obj of _gridService.colTitle;let i = index\">\n                                <div >{{obj.title}}&nbsp; \n                                    <button *ngIf=\"obj.filterable\" \n                                        class=\"glyphicon glyphicon-filter\" \n                                        type=\"button\" \n                                        (click)=\"showFilterInput(i)\">\n                                    </button>\n                                    <br>\n                                    <input   \n                                        *ngIf=\"obj.filterable && showInput[i]\"\n                                        myAutofocus=\"true\"\n                                        type=\"text\" \n                                        id=\"{{obj.key}}\"\n                                        name=\"{{obj.key}}\"\n                                        (keyup)=\"filter($event)\"\n                                     >\n                                     <br>\n                                     \n                                </div>\n\n                            </th>\n                            \n                        </tr>\n                        <tr *ngFor=\"let item of _gridService.dataGrid;let j = index\">\n                            <td *ngFor=\"let key of _gridService.keysName;let i = index\" align=\"center\">\n                                                     \n                                \n                                <!-- TYPE CHECK BOX -->\n                                <span *ngIf=\"this._gridService.colTitle[i].type == 'checkbox' \"> \n                                    <input *ngIf=\"item[key]\" name=\"{{key}}\" type=\"checkbox\" value=\"{{item[key]}}\" checked (change)=updateCheckBox($event,item) /> \n                                    <input *ngIf=\"item[key] == false\" name=\"{{key}}\" type=\"checkbox\" value=\"{{item[key]}}\" (change)=updateCheckBox($event,item) /> \n                                </span>\n                                \n                                <!-- TYPE COMBO MORE THAN 1 VALUE IN LIST COMBO-->\n                                <span *ngIf=\"this._gridService.colTitle[i].type == 'combo' &&  _gridService.dataGrid[0].course_list.length > 1\" >\n                                       <select id=\"groups\" (change)=\"changeCourse($event, item._id)\"   >\n                                            <option selected value=\"item[key]\">{{item[key]}}</option>\n                                            <option *ngFor=\"let course of _gridService.dataGrid[0].course_list\">{{course}}</option>\n                                       </select>\n                                </span>\n                                <!-- TYPE COMBO LESS THAN 1 VALUE IN LIST COMBO-->\n                                <span *ngIf=\"this._gridService.colTitle[i].type == 'combo' && _gridService.dataGrid[0].course_list.length < 2\">\n                                        {{item[key]}}  \n                                </span>\n                                \n                                <!-- NORMAL TYPE -->\n                                <span *ngIf=\"!filterActivated && _gridService.colTitle[i].type == 'standard'\">\n                                    {{item[key]}}  \n                                </span>\n                                \n                                <!-- FIELD PANEL TYPE -->\n                                <span *ngIf=\"!filterActivated && _gridService.colTitle[i].type == 'field_panel'\">\n                                    {{item[key]}}  \n                                </span>\n                                \n                                \n                            </td>\n                            \n                            <!-- EDIT BUTTON -->\n                            <td *ngIf=\"_stepService.steps[0].master_name == 'ballet'\">\n                                <a [routerLink]=\"['/editStudent', item._id, grid_name, master] \"> \n                                    <button class=\"btn btn-primary\" type=\"button\" > \n                                        <i class=\"glyphicon glyphicon-edit\"> </i>\n                                    </button>\n                                </a> \n                            </td>\n\n                            <!--- GROUP MANAGEMENT BUTTON --->\n                            <!--*ngIf=\"item.group_mgt\"-->\n                            <td *ngIf=\"_stepService.steps[0].master_name == 'ballet' && grid_name != 'New demands'\" >\n                                <a [routerLink]=\"['/groupManagement', item._id, grid_name, master] \">\n                                    <button class=\"btn btn-primary\" type=\"button\"> Group </button>\n                                </a> \n                            </td>\n                            <!-- IF DETAILS IS ACTIVATED IN GRID CONFIG COLLECTION -->\n                            <td *ngIf=\"item.details.activated\">\n                                <a [routerLink]=\"['/details', item._id] \">\n                                    <button class=\"btn btn-primary\" type=\"button\"> Detail </button>\n                                </a> \n                            </td>\n                            <!-- MODAL <td *ngIf=\"item.details.activated\"><button class=\"btn btn-success\" type=\"button\" data-toggle=\"modal\" data-target=\"#myModal\">DETAIL </button></td>-->\n                            \n                            <!--IF WORKFLOW TYPE BTN TO GO BACK TO CURRENT STEP -->\n                            <td *ngIf=\"this._stepService.steps[0].master_type == 'workflow'\"> <button class=\"btn btn-success\" type=\"button\" (click)=\"goToCurrentStep(item)\" value=\"{{item.step_id}} \">Current step </button></td>\n                        \n                            <!--<div class=\"modal fade\" id=\"myModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"myModalLabel\">-->\n  <!---->\n                          <!--<div *ngIf=\"item.details.activated\" class=\"modal-dialog\" role=\"document\">-->\n                            <!--<div class=\"modal-content\">-->\n                              <!--<div class=\"modal-header\">-->\n                                <!--<button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>-->\n                                <!--<h4 class=\"modal-title\" id=\"myModalLabel\"></h4>-->\n                              <!--</div>-->\n                              <!--<div class=\"modal-body\">-->\n                                <!--BODY ICI {{item.detail[0].power}}-->\n                                <!--<br> {{key}} <br>{{_gridService.keysName_details[0]}}-->\n                                <!--<div *ngFor=\"let fields of _gridService.keysName_details\">-->\n                                    <!--{{fields}}-->\n                                    <!--&lt;!&ndash;l&ndash;&gt;-->\n                                    <!--&lt;!&ndash;{{fields[0].power}}&ndash;&gt;-->\n                                <!--&lt;!&ndash;&ndash;&gt;-->\n                                <!--</div>-->\n                                <!---->\n                              <!--</div>-->\n                              <!--<div class=\"modal-footer\">-->\n                                <!--<button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\">Close</button>-->\n                                <!--<button type=\"button\" class=\"btn btn-primary\">Save changes</button>-->\n                              <!--</div>-->\n                            <!--</div>-->\n                          <!--</div>-->\n                        <!--</div>-->\n                        </tr>\n                        \n                    </table>\n                </div>\n               \n            </div>\n            <!-- Modal -->\n\n    "
        }), 
        __metadata('design:paramtypes', [step_service_1.StepService, grid_service_1.GridPanelService, router_1.Router, router_1.ActivatedRoute, http_1.Http, export_service_1.ExportService])
    ], GridPanelComponent);
    return GridPanelComponent;
}());
exports.GridPanelComponent = GridPanelComponent;

//# sourceMappingURL=data:application/json;base64,
