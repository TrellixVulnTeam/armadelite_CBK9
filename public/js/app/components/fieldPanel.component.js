"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('@angular/core');
var forms_1 = require("@angular/forms");
var form_service_1 = require("./form.service");
var emailValidator_component_1 = require("./emailValidator.component");
var FieldPanelComponent = (function () {
    function FieldPanelComponent(_fb, _formService) {
        this._fb = _fb;
        this._formService = _formService;
        this.sent = new core_1.EventEmitter();
        this.display = false;
        this.tempDisplay = false;
        this.myGroup = new forms_1.FormGroup({});
        this.arr = new forms_1.FormArray([]);
        this.errorForm = false;
    }
    FieldPanelComponent.prototype.ngOnInit = function () {
        var _this = this;
        console.log('NgOnInit');
        console.log(this.objStep);
        if (this.objStep.conditions.length > 0) {
            var valueCondition_1 = this.objStep.conditions[0].value;
            var keyCondition_1 = this.objStep.conditions[0].key;
            console.log(valueCondition_1);
            console.log(keyCondition_1);
            console.log(this.stepIdx);
            console.log(this._formService);
            if (typeof (this._formService.arraySteps.find(function (x) { return x[keyCondition_1] === valueCondition_1; })) != 'undefined') {
                this.tempDisplay = true;
            }
        }
        else {
            this.tempDisplay = true;
        }
        console.log(this.myGroup);
        if (this.tempDisplay) {
            console.log(this.objStep);
            for (var index = 0; index < this.objStep.configuration.form_values.length; index++) {
                if (typeof (this.objStep.configuration.form_values[index].autofocus) == 'undefined') {
                    this.objStep.configuration.form_values[index].autofocus = false;
                }
                console.log(this.objStep.name);
                console.log(this.objStep.configuration.form_values[index].name);
                console.log(this._formService.arraySteps);
                if (this.objStep.configuration.form_values[index].type == 'email') {
                    this.myGroup.addControl([this.objStep.configuration.form_values[index].name].toLocaleString(), new forms_1.FormControl('', [forms_1.Validators.required, emailValidator_component_1.EmailValidator.checkEmail]));
                }
                else {
                    this.myGroup.addControl([this.objStep.configuration.form_values[index].name].toLocaleString(), new forms_1.FormControl('', [forms_1.Validators.required, forms_1.Validators.minLength(2)]));
                }
                var objFieldsPanel = this._formService.arraySteps.find(function (y) { return y["nom"] === _this.objStep.name; });
                console.log("objFieldsPanel");
                console.log(objFieldsPanel);
                console.log(objFieldsPanel[this.objStep.name][index]);
                if (typeof objFieldsPanel != 'undefined') {
                    if (typeof objFieldsPanel[this.objStep.name][index] != 'undefined') {
                        var keyField = objFieldsPanel[this.objStep.name][index];
                        var valueField = keyField[this.objStep.configuration.form_values[index].name];
                        this.myGroup.controls[this.objStep.configuration.form_values[index].name].setValue(valueField);
                    }
                }
            }
            this.display = true;
            console.log(this.myGroup);
            console.log(this.myGroup.invalid);
            console.log(this.myGroup);
            console.log(this.myGroup.invalid);
        }
    };
    FieldPanelComponent.prototype.onClick = function () {
        console.log(this.arr);
        console.log(this.myGroup.controls);
        console.log(this.myGroup.invalid);
        console.log(this.myGroup.valid);
        console.log(this.myGroup);
        if (this.myGroup.valid) {
            console.log('form');
            console.log(this.objStep.name);
            console.log(eval(this.objStep.name));
            console.log(this.objStep.configuration.form_values[0].name);
            console.log(eval(this.objStep.name)[this.objStep.configuration.form_values[0].name].value);
            console.log(this.objStep.configuration.form_values);
            var valuesName = [];
            var valuesSelected = [];
            for (var index = 0; index < this.objStep.configuration.form_values.length; index++) {
                valuesName.push(this.objStep.configuration.form_values[index].name);
                valuesSelected.push(eval(this.objStep.name)[this.objStep.configuration.form_values[index].name].value);
            }
            console.log(valuesSelected);
            this.sent.emit({
                valueName: valuesName,
                valueSelected: valuesSelected,
                stepIdx: this.stepIdx,
                name: this.objStep.name
            });
        }
        else {
            $("#myModal").modal('show');
        }
    };
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], FieldPanelComponent.prototype, "objStep", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], FieldPanelComponent.prototype, "stepIdx", void 0);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', Object)
    ], FieldPanelComponent.prototype, "sent", void 0);
    FieldPanelComponent = __decorate([
        core_1.Component({
            selector: 'field-panel',
            template: "\n <div *ngIf=\"display\">\n        <div class=\"panel-heading panel-heading-custom\"><p class=\"text-uppercase\">{{objStep.configuration.labelPanel}} </p></div>\n        <div class=\"panel-body\">\n            <form  class=\"form-horizontal\" name=\"{{objStep.name}}\"  >\n                <div [formGroup]=\"myGroup\">                  \n\n               <!--/* FORMAT Configuration.form_values-->\n                    <!--[{  name,     :id\n                        ,  type :string, number-->\n                    <!--}]-->\n               <!--*/ -->\n                    <div *ngFor=\"let field of objStep.configuration.form_values; let i = index\">\n                         <div *ngIf=\"field.type == 'text'\">\n                             <div class=\"form-group\" [ngClass]=\"{'has-error':!myGroup.controls[field.name].valid && myGroup.controls[field.name].touched}\">\n                                 <label for=\"{{field.value}}\"   class=\"col-sm-2 control-label\" >{{field.label}} </label>\n                                 <div class=\"col-sm-10\">\n                                     <input *ngIf=\"i == 0\"     \n                                            myAutofocus\n                                            class=\"form-control\" \n                                            type=\"{{field.type}}\" \n                                            id=\"{{field.name}}\"\n                                            name=\"{{field.name}}\"\n                                            required=\"{{field.required}}\"\n                                            minlength=\"{{field.minlength}}\"\n                                            maxlength=\"{{field.maxlength}}\"\n                                            formControlName=\"{{field.name}}\"\n                                            [formControl]=\"myGroup.controls[field.name]\"\n                                            >\n                             \n                                        <input *ngIf=\"i > 0\"     \n                                                class=\"form-control\" \n                                                type=\"{{field.type}}\" \n                                                id=\"{{field.name}}\"\n                                                name=\"{{field.name}}\"\n                                                required=\"{{field.required}}\"\n                                                minlength=\"{{field.minlength}}\"\n                                                maxlength=\"{{field.maxlength}}\"\n                                                formControlName=\"{{field.name}}\"\n                                                [formControl]=\"myGroup.controls[field.name]\"\n                                                >\n                              \n                                    <div class=\"alert alert-danger\" role=\"alert\" *ngIf=\"!myGroup.controls[field.name].valid && myGroup.controls[field.name].touched \">This field is required</div>   \n                                    <div *ngIf=\"myGroup.controls[field.name].hasError('min') && myGroup.controls[field.name].touched\" class=\"alert alert-danger\">Field must be at least {{field.minlength}} characters long.</div>\n                                   </div>\n                             </div>\n                         </div>\n                         \n                    <div *ngIf=\"field.type == 'number'\">\n                        <div class=\"form-group\" [ngClass]=\"{'has-error':!myGroup.controls[field.name].valid && myGroup.controls[field.name].touched}\">\n                             <label for=\"{{field.value}}\"  class=\"col-sm-2 control-label\" >{{field.label}} </label>\n                             <div class=\"col-sm-10\">\n                             <input *ngIf=\"i == 0\"  \n                                    myAutofocus\n                                    class=\"form-control\" \n                                    type=\"{{field.type}}\" \n                                    id=\"{{field.name}}\"\n                                    name=\"{{field.name}}\"\n                                    required=\"{{field.required}}\"\n                                    min=\"{{field.minlength}}\"\n                                    max=\"{{field.maxlength}}\"\n                                    minlength=\"{{field.minlength}}\"\n                                    maxlength=\"{{field.maxlength}}\"\n                                    formControlName=\"{{field.name}}\"\n                                    [formControl]=\"myGroup.controls[field.name]\"\n                                   \n                                    >\n                         \n                         <input *ngIf=\"i > 0\"  \n                                    class=\"form-control\" \n                                    type=\"{{field.type}}\" \n                                    id=\"{{field.name}}\"\n                                    name=\"{{field.name}}\"\n                                    required=\"{{field.required}}\"\n                                    min=\"{{field.minlength}}\"\n                                    max=\"{{field.maxlength}}\"\n                                    minlength=\"{{field.minlength}}\"\n                                    maxlength=\"{{field.maxlength}}\"\n                                    formControlName=\"{{field.name}}\"\n                                    [formControl]=\"myGroup.controls[field.name]\"\n                                    >\n                         <div class=\"alert alert-danger\" role=\"alert\" *ngIf=\"!myGroup.controls[field.name].valid  && myGroup.controls[field.name].touched\"></div>   \n                         <div *ngIf=\"myGroup.controls[field.name].hasError('min') && myGroup.controls[field.name].touched\" class=\"alert alert-danger\">Veuillez indiquer un nombre plus grand</div>\n                        \n                        </div> \n                           \n                        </div>\n                    </div>\n                         \n                    <div *ngIf=\"field.type == 'date'\">\n                        <div class=\"form-group\" [ngClass]=\"{'has-error':!myGroup.controls[field.name].valid && myGroup.controls[field.name].touched}\">\n                             <label for=\"{{field.value}}\"  class=\"col-sm-2 control-label\" >{{field.label}} </label>\n                             <div class=\"col-sm-10\">\n                                <input class=\"form-control\"  \n                                    type='date' \n                                    name='{{field.name}}'\n                                    id=\"{{field.name}}\"\n                                    formControlName=\"{{field.name}}\"\n                                    required=\"{{field.required}}\"\n                                    [formControl]=\"myGroup.controls[field.name]\"/>\n                             </div>\n                        </div>\n                    </div> \n                     \n                    <div *ngIf=\"field.type == 'email'\">\n                        <div class=\"form-group\" [ngClass]=\"{'has-error':!myGroup.controls[field.name].valid && myGroup.controls[field.name].touched}\">\n                            <label for=\"{{field.value}}\"   class=\"col-sm-2 control-label\">EMAIL:</label>\n                            <div class=\"col-sm-10\">\n                            <input *ngIf=\"i == 0\"  \n                                myAutofocus \n                                class=\"form-control\" \n                                type=\"{{field.type}}\" \n                                id=\"{{field.name}}\"\n                                name=\"{{field.name}}\"\n                              \n                                #email\n                                formControlName=\"{{field.name}}\"\n                                required=\"{{field.required}}\"\n                                [formControl]=\"myGroup.controls[field.name]\">\n                                \n                            <input *ngIf=\"i > 0\"  \n                                class=\"form-control\" \n                                type=\"{{field.type}}\" \n                                id=\"{{field.name}}\"\n                                name=\"{{field.name}}\"\n                                #email\n                                formControlName=\"{{field.name}}\"\n                                required=\"{{field.required}}\"\n                                [formControl]=\"myGroup.controls[field.name]\">\n                                                              \n                            <div *ngIf=\"!myGroup.controls[field.name].valid && myGroup.controls[field.name].touched\" class=\"alert alert-danger\">\n                                We need a valid adress email\n                            </div>\n                            </div> \n                        </div>\n                    </div>\n                     \n                    </div>\n                    <div  id=\"myModal\" class=\"modal fade\" role=\"dialog\">\n  <div class=\"modal-dialog\">\n\n    <!-- Modal content-->\n    <div class=\"modal-content\">\n      <div class=\"modal-header\">\n        <button type=\"button\" class=\"close\" data-dismiss=\"modal\">&times;</button>\n        <h4 class=\"modal-title\">Fields mandatory</h4>\n      </div>\n      <div class=\"modal-body\">\n        <p>Thanks for fill in all the mandatory fields</p>\n      </div>\n      <div class=\"modal-footer\">\n        <button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\">Close</button>\n      </div>\n    </div>\n\n  </div>\n</div>\n            \n                 <!--<button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"myGroup.invalid\">Valider</button>-->\n                 <div align=\"center\">\n                    <button type=\"button\" data-target=\"#myModal\" (click)=\"onClick()\" class=\"btn btn-default btn-lg\">   Send   </button>\n                 </div>\n                </div>   \n            </form>\n        </div> \n        \n        </div>\n"
        }), 
        __metadata('design:paramtypes', [forms_1.FormBuilder, form_service_1.FormService])
    ], FieldPanelComponent);
    return FieldPanelComponent;
}());
exports.FieldPanelComponent = FieldPanelComponent;

//# sourceMappingURL=data:application/json;base64,
