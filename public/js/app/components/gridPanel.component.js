"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('@angular/core');
var gridPanel_service_1 = require("./gridPanel.service");
var router_1 = require('@angular/router');
var step_service_1 = require("../Engine/step.service");
var http_1 = require("@angular/http");
var GridPanelComponent = (function () {
    function GridPanelComponent(_stepService, _gridService, router, route, _http) {
        this._stepService = _stepService;
        this._gridService = _gridService;
        this.router = router;
        this.route = route;
        this._http = _http;
        this.display = false;
        this.myListData = [];
        this.keysName = [];
        this.showInput = [];
        this.filterActivated = false;
        this.valeur = "";
    }
    GridPanelComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.grid_name = this.route.snapshot.queryParams["grid_name"];
        this.valeur = this.route.snapshot.queryParams["master_val"];
        console.log(this.valeur);
        if (this.valeur != '') {
            this._gridService.getDatas(this.grid_name, this.valeur)
                .subscribe(function (data) {
                console.log(data);
                console.log(_this._gridService);
            }, function (error) { return console.log(error); });
        }
        else {
            this._gridService.getDatas(this.grid_name, '')
                .subscribe(function (data) {
                console.log(data);
                console.log(_this._gridService);
            }, function (error) { return console.log(error); });
        }
        for (var i = 0; i < this._gridService.colTitle.length; i++) {
            this.showInput.push(false);
        }
        this.myListData = this._gridService.dataGrid;
        this.keysName = this._gridService.keysName;
        console.log(this._gridService.keysName);
        console.log(this._gridService);
        this.display = true;
    };
    GridPanelComponent.prototype.goToCurrentStep = function (item) {
        console.log(item);
        var navigationExtras = {
            queryParams: { 'current_id': item.step_id, '_id': item._id }
        };
        this.router.navigate(['/step'], navigationExtras);
    };
    GridPanelComponent.prototype.isObject = function (item) {
        return (typeof item === "object" && !Array.isArray(item) && item !== null);
    };
    GridPanelComponent.prototype.showFilterInput = function (idx) {
        if (this.showInput[idx] == true) {
            this.showInput[idx] = false;
        }
        else {
            this.showInput[idx] = true;
        }
    };
    GridPanelComponent.prototype.checkUndefined = function (value) {
        console.log(value);
        console.log(typeof value === 'undefined');
        return (typeof value === 'undefined');
    };
    GridPanelComponent.prototype.updateCheckBox = function ($event, item) {
        var value = $event.target.checked;
        console.log(item);
        this._gridService.updateCheckbox(value, item._id)
            .subscribe(function (data) { return console.log(data); }, function (error) { return console.log(error); });
    };
    GridPanelComponent.prototype.filter = function (event) {
        console.log(event.target);
        console.log("passe par grid cmp");
        console.log(event);
        console.log(this._gridService.dataGrid);
        this._gridService.filterData(event.target.value, event.srcElement.id);
    };
    GridPanelComponent = __decorate([
        core_1.Component({
            selector: 'grid-panel',
            template: "\n<<<<<<< HEAD\n              <div>\n                <nav class=\"form-navArrow\">\n                   <a [routerLink]=\"['/']\">\n                   <!--<a [routerLink]=\"['/menu']\" [queryParams]=\"{'firstLoad': false}\">-->\n                       <button class=\"btn btn-warning\"><i class=\"glyphicon glyphicon-triangle-left\" ></i>BACK</button></a>\n                </nav>\n              </div>\n               \n               \n               <div class=\"panel-heading panel-heading-custom\" align=\"center\">\n                 <h2 *ngIf=\"valeur != ''\">{{valeur}}</h2>\n                 <h3>{{grid_name}}</h3>\n=======\n            <!--<div align=\"left\">-->\n                <!--<nav>-->\n                <!---->\n                    <!--<div class=\"col-md-3\">-->\n                        <!--<button type=\"button\" class=\"btn btn-success glyphicon glyphicon-plus\" (click)=\"this.router.navigate(['/step'])\" >Add new line</button>-->\n                    <!--</div>-->\n                <!--</nav>-->\n                <!---->\n            <!--</div>-->\n          \n              \n              <nav class=\"form-navArrow\">\n                        <button><i class=\"glyphicon glyphicon-triangle-left\" (click)=\"this.router.navigate(['/'])\" ></i></button>\n              </nav>\n               \n               <div class=\"page-header\" align=\"center\">\n                 <h1 *ngIf=\"valeur != ''\">{{valeur}}</h1>\n                 <h2>{{grid_name}}</h2>\n>>>>>>> d1fa1eedbea399ac5399c1fa03a123a371822cea\n               </div>\n               \n                <div class=\"panel-body\">\n               <div class=\"table-responsive\" *ngIf=\"display\">\n                    <table class=\"table table-hover table-condensed\"  >\n                        <tr>\n                            <th *ngFor=\"let obj of _gridService.colTitle;let i = index\">\n                                <div>{{obj.title}}&nbsp; \n                                    <button  \n                                        class=\"glyphicon glyphicon-filter\" \n                                        type=\"button\" \n                                        (click)=\"showFilterInput(i)\">\n                                    </button>\n                                    <br>\n                                    <input   \n                                        *ngIf=\"showInput[i] == true\"\n                                        myAutofocus=\"true\"\n                                        type=\"text\" \n                                        id=\"{{obj.key}}\"\n                                        name=\"{{obj.key}}\"\n                                        (keyup)=\"filter($event)\"\n                                     >\n                                     <br>\n                                     \n                                </div>\n\n                            </th>\n                            \n                        </tr>\n                        <tr *ngFor=\"let item of _gridService.dataGrid;let j = index\">\n                            <td *ngFor=\"let key of _gridService.keysName;let i = index\" align=\"center\">\n                                                     \n                                <span *ngIf=\"!filterActivated && _gridService.colTitle[i].type != 'checkbox' \"> {{item[key]}}  </span>\n                                \n                                <span *ngIf=\"this._gridService.colTitle[i].type == 'checkbox' \"> \n                                    <input *ngIf=\"item[key]\" type=\"checkbox\" value=\"{{item[key]}}\" checked (change)=updateCheckBox($event,item) /> \n                                    <input *ngIf=\"item[key] == false\" type=\"checkbox\" value=\"{{item[key]}}\" (change)=updateCheckBox($event,item) /> \n                                </span>\n                            </td>\n                            \n                            <td>\n                                <a [routerLink]=\"['/editStudent', item._id] \"> \n                                    <button class=\"btn btn-primary\" type=\"button\" > \n                                        <i class=\"glyphicon glyphicon-edit\"> </i>\n                                    </button>\n                                </a> \n                            </td>\n\n                            \n                            <!--*ngIf=\"item.group_mgt\"-->\n<<<<<<< HEAD\n                            <td >\n                                <a [routerLink]=\"['/groupManagement', item._id, grid_name, valeur] \">\n                                    <button class=\"btn btn-primary\" type=\"button\">{{item.stage}} Group </button>\n                                </a> \n                            </td>\n                            <!-- IF DETAILS IS ACTIVATED IN GRID CONFIG COLLECTION -->\n                            <td *ngIf=\"item.details.activated\">\n                                <a [routerLink]=\"['/details', item._id] \">\n                                    <button class=\"btn btn-primary\" type=\"button\"> Detail </button>\n                                </a> \n                            </td>\n=======\n                            <td ><a [routerLink]=\"['/groupManagement', item._id, grid_name, valeur] \"><button class=\"btn btn-success\" type=\"button\">{{item.stage}} Group </button></a> </td>\n                            <!-- IF DETAILS IS ACTIVATED IN GRID CONFIG COLLECTION -->\n                            <td *ngIf=\"item.details.activated\"><a [routerLink]=\"['/details', item._id] \"><button class=\"btn btn-success\" type=\"button\"> Detail </button></a> </td>\n>>>>>>> d1fa1eedbea399ac5399c1fa03a123a371822cea\n                            <!-- MODAL <td *ngIf=\"item.details.activated\"><button class=\"btn btn-success\" type=\"button\" data-toggle=\"modal\" data-target=\"#myModal\">DETAIL </button></td>-->\n                            \n                            <!--IF WORKFLOW TYPE BTN TO GO BACK TO CURRENT STEP -->\n                            <td *ngIf=\"this._stepService.steps[0].master_type == 'workflow'\"> <button class=\"btn btn-success\" type=\"button\" (click)=\"goToCurrentStep(item)\" value=\"{{item.step_id}} \">Current step </button></td>\n                        \n                            <!--<div class=\"modal fade\" id=\"myModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"myModalLabel\">-->\n  <!---->\n                          <!--<div *ngIf=\"item.details.activated\" class=\"modal-dialog\" role=\"document\">-->\n                            <!--<div class=\"modal-content\">-->\n                              <!--<div class=\"modal-header\">-->\n                                <!--<button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>-->\n                                <!--<h4 class=\"modal-title\" id=\"myModalLabel\"></h4>-->\n                              <!--</div>-->\n                              <!--<div class=\"modal-body\">-->\n                                <!--BODY ICI {{item.detail[0].power}}-->\n                                <!--<br> {{key}} <br>{{_gridService.keysName_details[0]}}-->\n                                <!--<div *ngFor=\"let fields of _gridService.keysName_details\">-->\n                                    <!--{{fields}}-->\n                                    <!--&lt;!&ndash;l&ndash;&gt;-->\n                                    <!--&lt;!&ndash;{{fields[0].power}}&ndash;&gt;-->\n                                <!--&lt;!&ndash;&ndash;&gt;-->\n                                <!--</div>-->\n                                <!---->\n                              <!--</div>-->\n                              <!--<div class=\"modal-footer\">-->\n                                <!--<button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\">Close</button>-->\n                                <!--<button type=\"button\" class=\"btn btn-primary\">Save changes</button>-->\n                              <!--</div>-->\n                            <!--</div>-->\n                          <!--</div>-->\n                        <!--</div>-->\n                        </tr>\n                        \n                    </table>\n                </div>\n               \n            </div>\n            <!-- Modal -->\n\n    "
        }), 
        __metadata('design:paramtypes', [step_service_1.StepService, gridPanel_service_1.GridPanelService, (typeof (_a = typeof router_1.Router !== 'undefined' && router_1.Router) === 'function' && _a) || Object, (typeof (_b = typeof router_1.ActivatedRoute !== 'undefined' && router_1.ActivatedRoute) === 'function' && _b) || Object, (typeof (_c = typeof http_1.Http !== 'undefined' && http_1.Http) === 'function' && _c) || Object])
    ], GridPanelComponent);
    return GridPanelComponent;
    var _a, _b, _c;
}());
exports.GridPanelComponent = GridPanelComponent;

//# sourceMappingURL=data:application/json;base64,
