"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('@angular/core');
var router_1 = require('@angular/router');
var http_1 = require("@angular/http");
var group_service_1 = require("./group.service");
var grid_service_1 = require("../grid.service");
var GroupComponent = (function () {
    function GroupComponent(router, _gridService, _groupService, route, _http) {
        this.router = router;
        this._gridService = _gridService;
        this._groupService = _groupService;
        this.route = route;
        this._http = _http;
        this.display = false;
        this.groups = [];
        this.student = {};
        this.currentGroup = '';
    }
    GroupComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.sub = this.route.params.subscribe(function (params) {
            _this.obj_id = params['record'];
            _this.course_type = params['course_type'];
            _this.stage = params['stage'];
        });
        console.log(this.obj_id);
        console.log(this.stage);
        console.log(this._gridService.dataGrid);
        this.student = this._gridService.dataGrid[this._gridService.dataGrid.findIndex(function (x) { return x._id == _this.obj_id; })];
        console.log(this.student);
        console.log(this.course_type);
        this._groupService.getGroups(this.obj_id, this.course_type, this.stage)
            .subscribe(function (data) {
            _this.values = data;
            _this.groups = _this.values[_this.values.length - 1].groups;
            _this.values.pop();
            console.log(_this.values);
            _this.currentGroup = _this.student['group'];
            console.log(_this.groups);
            _this.display = true;
        }, function (error) { return console.log(error); });
    };
    GroupComponent.prototype.updateGroup = function ($event) {
        var _this = this;
        var group = $event.target.value;
        this._groupService.changeGroup(group, this.obj_id)
            .subscribe(function (data) {
            console.log(data);
            _this.currentGroup = group;
            _this._groupService.getGroups(_this.obj_id, _this.course_type, _this.stage)
                .subscribe(function (data) {
                _this.values = data;
                _this.currentGroup = group;
                console.log(_this.groups);
            }, function (error) { return console.log(error); });
        }, function (error) { return console.log(error); });
    };
    GroupComponent = __decorate([
        core_1.Component({
            selector: 'group',
            template: "\n    \n\n \n    <div class=\"panel-heading panel-heading-custom\" *ngIf=\"display\">\n        <div  class=\"row\" align=\"left\">\n            <div class=\"col-md-2\">\n                 <nav class=\"form-navArrow\">\n                    <a [routerLink]=\"['/grid']\" [queryParams]=\"{'grid_name': course_type, 'master': stage}\">\n                    <button class=\"btn btn-warning\"><i class=\"glyphicon glyphicon-triangle-left\" ></i>BACK</button></a>\n                 </nav>\n            </div>\n        \n          <div class=\"col-md-10\" align=\"center\">\n            <h1 *ngIf=\"stage != ''\">{{stage}} - {{course_type}}</h1>\n            <h4>Number of students per week and per group</h4>\n          </div>\n          </div>\n    </div>\n\n    <div class=\"panel-body\"  *ngIf=\"display\"> \n        <div align=\"center\">\n            <h3>{{student.profile_nom}} {{student.profile_firstname}} </h3>\n            <h4>Number of weeks: {{student.duration}}  -  Current group: {{this.currentGroup}}</h4>\n            <h4>Set to group:</h4> \n            <select id=\"groups\" (change)=\"updateGroup($event)\"  >\n                <option> --</option>\n                <option *ngFor=\"let group of this.groups\" value=\"{{group}}\">{{group}}</option>\n            </select>\n        </div>\n\n        \n        <br>        \n        \n        <table class=\"table table-hover table-condensed\" *ngIf=\"stage != 'Alicante Winter Intensive 2017'\" >\n            <tr >\n                <td></td>\n                <td>WEEK 1</td>\n                <td>WEEK 2</td>\n                <td>WEEK 3</td>\n            </tr>\n            <tr *ngFor=\"let item of this.values\">\n                <td>{{item.group}}</td>\n                <td *ngFor=\"let peoples of item.lst\"> \n                   {{peoples.people}} \n                </td>\n            </tr>\n        </table>\n        \n        <table class=\"table table-hover table-condensed\" *ngIf=\"stage == 'Alicante Winter Intensive 2017'\" >\n            <tr >\n                <td></td>\n                <td>Nb of students</td>\n            </tr>\n            <tr *ngFor=\"let item of this.values\">\n                <td>{{item.group}}</td>\n                <td *ngFor=\"let peoples of item.lst\"> \n                   {{peoples.people}} \n                </td>\n            </tr>\n        </table>\n        \n   </div>"
        }), 
        __metadata('design:paramtypes', [router_1.Router, grid_service_1.GridPanelService, group_service_1.GroupService, router_1.ActivatedRoute, http_1.Http])
    ], GroupComponent);
    return GroupComponent;
}());
exports.GroupComponent = GroupComponent;

//# sourceMappingURL=data:application/json;base64,
