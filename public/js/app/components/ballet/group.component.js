"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('@angular/core');
var router_1 = require('@angular/router');
var http_1 = require("@angular/http");
var group_service_1 = require("./group.service");
var gridPanel_service_1 = require("../gridPanel.service");
var GroupComponent = (function () {
    function GroupComponent(router, _gridService, _groupService, route, _http) {
        this.router = router;
        this._gridService = _gridService;
        this._groupService = _groupService;
        this.route = route;
        this._http = _http;
        this.display = false;
        this.groups = [];
        this.student = {};
        this.currentGroup = '';
    }
    GroupComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.sub = this.route.params.subscribe(function (params) {
            _this.obj_id = params['record'];
            _this.course_type = params['course_type'];
            _this.stage = params['stage'];
        });
        console.log(this.obj_id);
        console.log(this._gridService.dataGrid);
        this.student = this._gridService.dataGrid[this._gridService.dataGrid.findIndex(function (x) { return x._id == _this.obj_id; })];
        console.log(this.student);
        console.log(this.course_type);
        this._groupService.getGroups(this.obj_id, this.course_type, this.stage)
            .subscribe(function (data) {
            _this.values = data;
            _this.groups = _this.values[_this.values.length - 1].groups;
            _this.values.pop();
            console.log(_this.values);
            _this.currentGroup = _this.student['group'];
            console.log(_this.groups);
            _this.display = true;
        }, function (error) { return console.log(error); });
    };
    GroupComponent.prototype.updateGroup = function ($event) {
        var _this = this;
        var group = $event.target.value;
        this._groupService.changeGroup(group, this.obj_id)
            .subscribe(function (data) {
            console.log(data);
            _this.currentGroup = group;
            _this._groupService.getGroups(_this.obj_id, _this.course_type, _this.stage)
                .subscribe(function (data) {
                _this.values = data;
                _this.currentGroup = group;
                console.log(_this.groups);
            }, function (error) { return console.log(error); });
        }, function (error) { return console.log(error); });
    };
    GroupComponent = __decorate([
        core_1.Component({
            selector: 'group',
            template: "\n    \n<<<<<<< HEAD:assets/app/components/ballet/group.component.ts\n     <nav class=\"form-navArrow\" *ngIf=\"display\">\n        <a [routerLink]=\"['/grid']\" [queryParams]=\"{'grid_name': course_type, 'master_val': stage}\">\n        <button class=\"btn btn-warning\"><i class=\"glyphicon glyphicon-triangle-left\" ></i>BACK</button></a>\n     </nav>\n \n    <div class=\"panel-heading panel-heading-custom\" *ngIf=\"display\">\n        <h1 *ngIf=\"stage != ''\">{{stage}} - {{course_type}}</h1>\n    </div>\n\n    <div class=\"panel-body\"  *ngIf=\"display\"> \n        <div>\n=======\n      <nav class=\"form-navArrow\" *ngIf=\"display\">\n            <a [routerLink]=\"['/grid']\" [queryParams]=\"{'grid_name': course_type, 'master_val': stage}\">\n            <button><i class=\"glyphicon glyphicon-triangle-left\" >BACK</i></button></a>\n      </nav>\n\n    \n    <div  *ngIf=\"display\"> \n       <div align=\"center\">\n          <h1 *ngIf=\"stage != ''\">{{stage}} - {{course_type}}</h1>\n        </div>  \n    \n     <table class=\"table table-hover table-condensed\"  >\n                        \n                        <tr >\n                            <td></td>\n                            <td>WEEK 1</td>\n                            <td>WEEK 2</td>\n                            <td>WEEK 3</td>\n                        </tr>\n                        <tr *ngFor=\"let item of this.values\">\n                            <!--<div ngIf=\"typeOf (item.group) != 'undefined'\">-->\n                                <td>{{item.group}}</td>\n                                <td *ngFor=\"let peoples of item.lst\"> \n                                   {{peoples.people}} \n                                </td>\n                            <!--</div>-->\n                        </tr>\n        </table>\n        <span>\n>>>>>>> d1fa1eedbea399ac5399c1fa03a123a371822cea:assets/app/components/group/group.component.ts\n            {{student.profile_nom}} {{student.profile_firstname}} - Number of weeks: {{student.duration}} \n        </div>\n        <span>\n            Set to group: \n            <select id=\"groups\" (change)=\"updateGroup($event)\"  >\n                <option> --</option>\n                <option *ngFor=\"let group of this.groups\" value=\"{{group}}\">{{group}}</option>\n            </select>\n        </span>\n\n        <div>Current group: {{this.currentGroup}}</div>\n        <div></div>        \n        <table class=\"table table-hover table-condensed\"  >\n            <tr >\n                <td></td>\n                <td>WEEK 1</td>\n                <td>WEEK 2</td>\n                <td>WEEK 3</td>\n            </tr>\n            <tr *ngFor=\"let item of this.values\">\n                <td>{{item.group}}</td>\n                <td *ngFor=\"let peoples of item.lst\"> \n                   {{peoples.people}} \n                </td>\n            </tr>\n        </table>\n   </div>"
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof router_1.Router !== 'undefined' && router_1.Router) === 'function' && _a) || Object, gridPanel_service_1.GridPanelService, group_service_1.GroupService, (typeof (_b = typeof router_1.ActivatedRoute !== 'undefined' && router_1.ActivatedRoute) === 'function' && _b) || Object, (typeof (_c = typeof http_1.Http !== 'undefined' && http_1.Http) === 'function' && _c) || Object])
    ], GroupComponent);
    return GroupComponent;
    var _a, _b, _c;
}());
exports.GroupComponent = GroupComponent;

//# sourceMappingURL=data:application/json;base64,
