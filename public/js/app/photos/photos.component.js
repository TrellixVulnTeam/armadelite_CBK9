"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var photos_service_1 = require("./photos.service");
var router_1 = require("@angular/router");
var PhotosComponent = (function () {
    function PhotosComponent(router, _photoService) {
        this.router = router;
        this._photoService = _photoService;
        this.progressPhoto = 0;
        this.showPhoto1 = true;
        this.showPhoto2 = false;
        this.showPhoto3 = false;
        this.showPhoto4 = false;
        this.showPhoto5 = false;
    }
    PhotosComponent.prototype.upload = function () {
        this.progressPhoto = this.progressPhoto + 20;
        if (this.progressPhoto == 100) {
            this.router.navigate(['/profile']);
        }
    };
    PhotosComponent.prototype.fileChangeEvent = function (fileInput) {
        console.log('fileChangeEvent');
        console.log(fileInput.target.files);
        var objectURL = window.URL.createObjectURL(fileInput.target.files[0]);
        console.log(objectURL);
        console.log('apres');
        this.data = objectURL;
    };
    PhotosComponent = __decorate([
        core_1.Component({
            selector: 'upload-photo',
            template: "\n                <progress class=\"progress progress-danger\" [attr.value]=\"progressPhoto\" max=\"100\" aria-describedby=\"example-caption-1\"></progress>\n                <div class=\"panel panel-default\" *ngIf=\"showPhoto1\">\n                    <form method=\"post\" enctype=\"multipart/form-data\">\n                        <div>\n                            <img height=\"300\" width=\"360\" src=\"/images/modele/photo1.jpg\">\n                        </div>\n                        <div>\n                            \n                            <input type=\"file\" class=\"btn btn-primary btn-primary-custom\"  (change)=\"fileChangeEvent($event)\" placeholder=\"Upload file...\">\n                            <button type=\"button\" (click)=\"upload(); this.showPhoto2 = true; this.showPhoto1 = false;\" class=\"btn btn-primary btn-primary-custom\">Upload</button>    \n                       </div>\n                   </form>\n                </div>\n                <div class=\"panel panel-default\" *ngIf=\"showPhoto2\">\n                    <form method=\"post\" enctype=\"multipart/form-data\">\n                        <div>\n                            <img height=\"300\" width=\"360\" src=\"/images/modele/photo2.jpg\">\n                        </div>\n                       <div>\n                            <input type=\"file\" (change)=\"fileChangeEvent($event)\" placeholder=\"Upload file...\" class=\"btn btn-primary btn-primary-custom\">\n                            <button type=\"button\" (click)=\"upload();this.showPhoto3 = true; this.showPhoto2 = false;\" class=\"btn btn-primary btn-primary-custom\">Upload</button>\n                       </div>\n                       </form>\n                </div>\n                <div class=\"panel panel-default\" *ngIf=\"showPhoto3\">\n                    <form method=\"post\" enctype=\"multipart/form-data\">\n                        <div>\n                            <img height=\"300\" width=\"360\" src=\"/images/modele/photo3.jpg\">\n                        </div>\n                       <div>\n                            <input type=\"file\" (change)=\"fileChangeEvent($event)\" placeholder=\"Upload file...\" class=\"btn btn-primary btn-primary-custom\">\n                            <button type=\"button\" (click)=\"upload();this.showPhoto4 = true; this.showPhoto3 = false;\" class=\"btn btn-primary btn-primary-custom\">Upload</button>\n                       </div>\n                       </form>\n                </div>\n                <div class=\"panel panel-default\" *ngIf=\"showPhoto4\">\n                    <form method=\"post\" enctype=\"multipart/form-data\">\n                        <div>\n                            <img height=\"300\" width=\"360\" src=\"/images/modele/photo4.jpg\">\n                        </div>\n                       <div>\n                            <input type=\"file\" (change)=\"fileChangeEvent($event)\" placeholder=\"Upload file...\" class=\"btn btn-primary btn-primary-custom\">\n                            <button type=\"button\" (click)=\"upload();this.showPhoto5 = true; this.showPhoto4 = false;\" class=\"btn btn-primary btn-primary-custom\">Upload</button>\n                       </div>\n                       </form>\n                </div>\n                                <div class=\"panel panel-default\" *ngIf=\"showPhoto5\">\n                    <form method=\"post\" enctype=\"multipart/form-data\">\n                        <div>\n                            <img height=\"300\" width=\"360\" src=\"/images/modele/photo5.jpg\">\n                        </div>\n                       <div>\n                            <input type=\"file\" (change)=\"fileChangeEvent($event)\" placeholder=\"Upload file...\" class=\"btn btn-primary btn-primary-custom\">\n                            <button type=\"button\" (click)=\"upload()\" class=\"btn btn-primary btn-primary-custom\">Upload</button>\n                       </div>\n                       </form>\n                </div>\n               <!--<div>-->\n                    <!--<input type=\"file\" (change)=\"fileChangeEvent($event)\" placeholder=\"Upload file...\">-->\n               <!--</div>-->\n               <!---->\n               <div >\n               <!--<input type=\"submit\"/>-->\n                \n               </div>\n               \n        <!--ngFileSelect-->\n       <!--[options]=\"basicOptions\"-->\n    <!--(onUpload)=\"handleUpload($event)\">-->\n ><br>\n<nav>\n    <div><a [routerLink]=\"['/profile']\"> SUIVANT </a></div>\n</nav>\n\n"
        }), 
        __metadata('design:paramtypes', [router_1.Router, photos_service_1.PhotosService])
    ], PhotosComponent);
    return PhotosComponent;
}());
exports.PhotosComponent = PhotosComponent;

//# sourceMappingURL=data:application/json;base64,
