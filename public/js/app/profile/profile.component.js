"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('@angular/core');
var forms_1 = require("@angular/forms");
var form_service_1 = require("../components/form.service");
var profile_service_1 = require("./profile.service");
var ProfileComponent = (function () {
    function ProfileComponent(_fb, _formService, _profileService) {
        this._fb = _fb;
        this._formService = _formService;
        this._profileService = _profileService;
    }
    ProfileComponent.prototype.ngOnInit = function () {
        this.registerForm = this._fb.group({
            lastName: ['', forms_1.Validators.required],
            post_code: ['', forms_1.Validators.required],
            email: ['', forms_1.Validators.compose([
                    forms_1.Validators.required
                ])],
            phone: ['', forms_1.Validators.required]
        });
    };
    ProfileComponent.prototype.onSubmit = function () {
        this._profileService.saveDemand(this._formService)
            .subscribe(function (data) { return console.log(data); }, function (error) { return console.log(error); });
    };
    ProfileComponent = __decorate([
        core_1.Component({
            selector: 'profile',
            template: "\n<div class=\"panel panel-default\">\n        <div class=\"panel-heading panel-heading-custom\">PROFILE </div>\n        <div class=\"panel-body\">\n        <section class=\"col-md-8 col-md-offset-2\">\n            <form [formGroup]=\"registerForm\" (ngSubmit)=\"onSubmit()\">\n                <div class=\"form-group\">\n                    <label for=\"name\">Nom</label>\n                    <input formControlName=\"lastName\" type=\"text\" id=\"name\" class=\"form-control\">\n                    <p *ngIf=\"registerForm.controls.lastName.errors\">This field is required!</p>\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"email\">Mail</label>\n                    <input formControlName=\"email\" type=\"email\" id=\"email\" class=\"form-control\">\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"post_code\">Code postal</label>\n                    <input formControlName=\"post_code\" type=\"number\" id=\"post_code\" class=\"form-control\">\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"phone\">Num\u00E9ro de t\u00E9l\u00E9phone</label>\n                    <input formControlName=\"phone\" type=\"number\" id=\"phone\" class=\"form-control\">\n                </div>\n                <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"!registerForm.valid\">Valider</button>\n            </form>\n        </section>\n        </div>\n</div>\n"
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof forms_1.FormBuilder !== 'undefined' && forms_1.FormBuilder) === 'function' && _a) || Object, form_service_1.FormService, profile_service_1.ProfileService])
    ], ProfileComponent);
    return ProfileComponent;
    var _a;
}());
exports.ProfileComponent = ProfileComponent;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInByb2ZpbGUvcHJvZmlsZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLHFCQUF3QixlQUN4QixDQUFDLENBRHNDO0FBRXZDLHNCQUFpRCxnQkFBZ0IsQ0FBQyxDQUFBO0FBQ2xFLDZCQUEwQiw0QkFBNEIsQ0FBQyxDQUFBO0FBRXZELGdDQUE2QixtQkFBbUIsQ0FBQyxDQUFBO0FBb0NqRDtJQU1JLDBCQUFvQixHQUFnQixFQUFTLFlBQXlCLEVBQVUsZUFBK0I7UUFBM0YsUUFBRyxHQUFILEdBQUcsQ0FBYTtRQUFTLGlCQUFZLEdBQVosWUFBWSxDQUFhO1FBQVUsb0JBQWUsR0FBZixlQUFlLENBQWdCO0lBRy9HLENBQUM7SUFNRCxtQ0FBUSxHQUFSO1FBR0ksSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQztZQUMvQixRQUFRLEVBQUUsQ0FBQyxFQUFFLEVBQUUsa0JBQVUsQ0FBQyxRQUFRLENBQUM7WUFDbkMsU0FBUyxFQUFFLENBQUMsRUFBRSxFQUFFLGtCQUFVLENBQUMsUUFBUSxDQUFDO1lBQ3BDLEtBQUssRUFBRSxDQUFDLEVBQUUsRUFBRSxrQkFBVSxDQUFDLE9BQU8sQ0FBQztvQkFDM0Isa0JBQVUsQ0FBQyxRQUFRO2lCQUV0QixDQUFDLENBQUM7WUFDSCxLQUFLLEVBQUUsQ0FBQyxFQUFFLEVBQUUsa0JBQVUsQ0FBQyxRQUFRLENBQUM7U0FDbkMsQ0FBQyxDQUFBO0lBV04sQ0FBQztJQUVELG1DQUFRLEdBQVI7UUFVSSxJQUFJLENBQUMsZUFBZSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDO2FBQzdDLFNBQVMsQ0FDTixVQUFBLElBQUksSUFBSSxPQUFBLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQWpCLENBQWlCLEVBQ3pCLFVBQUEsS0FBSyxJQUFJLE9BQUEsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBbEIsQ0FBa0IsQ0FDOUIsQ0FBQTtJQUlULENBQUM7SUExRkw7UUFBQyxnQkFBUyxDQUFDO1lBQ1AsUUFBUSxFQUFFLFNBQVM7WUFDbkIsUUFBUSxFQUFFLDAvQ0E0QmI7U0FDQSxDQUFDOzt3QkFBQTtJQW9FRix1QkFBQzs7QUFBRCxDQWxFQSxBQWtFQyxJQUFBO0FBbEVZLHdCQUFnQixtQkFrRTVCLENBQUEiLCJmaWxlIjoicHJvZmlsZS9wcm9maWxlLmNvbXBvbmVudC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29tcG9uZW50fSBmcm9tICdAYW5ndWxhci9jb3JlJ1xuaW1wb3J0IHtGb3JtUHJvZmlsZX0gZnJvbSAnLi4vcHJvZmlsZS9mb3JtUHJvZmlsZSdcbmltcG9ydCB7Rm9ybUJ1aWxkZXIsIFZhbGlkYXRvcnMsIEZvcm1Hcm91cH0gZnJvbSBcIkBhbmd1bGFyL2Zvcm1zXCI7XG5pbXBvcnQge0Zvcm1TZXJ2aWNlfSBmcm9tIFwiLi4vY29tcG9uZW50cy9mb3JtLnNlcnZpY2VcIjtcbi8vaW1wb3J0IHtDb250cm9sR3JvdXB9IGZyb20gXCIuLi8uLi8uLi9wdWJsaWMvanMvdmVuZG9yL0Bhbmd1bGFyL2NvbW1vbi9lc20vc3JjL2Zvcm1zLWRlcHJlY2F0ZWQvbW9kZWxcIjtcbmltcG9ydCB7UHJvZmlsZVNlcnZpY2V9IGZyb20gXCIuL3Byb2ZpbGUuc2VydmljZVwiO1xuLy9pbXBvcnQge0NvbnRyb2xHcm91cCwgQ29udHJvbH0gZnJvbSBcIkBhbmd1bGFyL2NvbW1vblwiO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ3Byb2ZpbGUnLFxuICAgIHRlbXBsYXRlOiBgXG48ZGl2IGNsYXNzPVwicGFuZWwgcGFuZWwtZGVmYXVsdFwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwicGFuZWwtaGVhZGluZyBwYW5lbC1oZWFkaW5nLWN1c3RvbVwiPlBST0ZJTEUgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJwYW5lbC1ib2R5XCI+XG4gICAgICAgIDxzZWN0aW9uIGNsYXNzPVwiY29sLW1kLTggY29sLW1kLW9mZnNldC0yXCI+XG4gICAgICAgICAgICA8Zm9ybSBbZm9ybUdyb3VwXT1cInJlZ2lzdGVyRm9ybVwiIChuZ1N1Ym1pdCk9XCJvblN1Ym1pdCgpXCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXBcIj5cbiAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj1cIm5hbWVcIj5Ob208L2xhYmVsPlxuICAgICAgICAgICAgICAgICAgICA8aW5wdXQgZm9ybUNvbnRyb2xOYW1lPVwibGFzdE5hbWVcIiB0eXBlPVwidGV4dFwiIGlkPVwibmFtZVwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCI+XG4gICAgICAgICAgICAgICAgICAgIDxwICpuZ0lmPVwicmVnaXN0ZXJGb3JtLmNvbnRyb2xzLmxhc3ROYW1lLmVycm9yc1wiPlRoaXMgZmllbGQgaXMgcmVxdWlyZWQhPC9wPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwXCI+XG4gICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9XCJlbWFpbFwiPk1haWw8L2xhYmVsPlxuICAgICAgICAgICAgICAgICAgICA8aW5wdXQgZm9ybUNvbnRyb2xOYW1lPVwiZW1haWxcIiB0eXBlPVwiZW1haWxcIiBpZD1cImVtYWlsXCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cFwiPlxuICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPVwicG9zdF9jb2RlXCI+Q29kZSBwb3N0YWw8L2xhYmVsPlxuICAgICAgICAgICAgICAgICAgICA8aW5wdXQgZm9ybUNvbnRyb2xOYW1lPVwicG9zdF9jb2RlXCIgdHlwZT1cIm51bWJlclwiIGlkPVwicG9zdF9jb2RlXCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cFwiPlxuICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPVwicGhvbmVcIj5OdW3DqXJvIGRlIHTDqWzDqXBob25lPC9sYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgPGlucHV0IGZvcm1Db250cm9sTmFtZT1cInBob25lXCIgdHlwZT1cIm51bWJlclwiIGlkPVwicGhvbmVcIiBjbGFzcz1cImZvcm0tY29udHJvbFwiPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cInN1Ym1pdFwiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgW2Rpc2FibGVkXT1cIiFyZWdpc3RlckZvcm0udmFsaWRcIj5WYWxpZGVyPC9idXR0b24+XG4gICAgICAgICAgICA8L2Zvcm0+XG4gICAgICAgIDwvc2VjdGlvbj5cbiAgICAgICAgPC9kaXY+XG48L2Rpdj5cbmBcbn0pXG5cbmV4cG9ydCBjbGFzcyBQcm9maWxlQ29tcG9uZW50IHtcbiAgICAvL3B1YmxpYyBteUZvcm0gPSBuZXcgRm9ybVByb2ZpbGUoMCwnJywnJylcbiAgLy8gcmVnaXN0ZXJGb3JtOiBDb250cm9sR3JvdXA7XG5cbiAgICByZWdpc3RlckZvcm06IEZvcm1Hcm91cDtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgX2ZiOiBGb3JtQnVpbGRlciwgcHVibGljIF9mb3JtU2VydmljZTogRm9ybVNlcnZpY2UsIHByaXZhdGUgX3Byb2ZpbGVTZXJ2aWNlOiBQcm9maWxlU2VydmljZSkgeyAgLy9cblxuICAgIC8vIHRoaXMuZnMubW9kZWxlU2VsZWN0ZWQ7XG4gICAgfVxuXG5cblxuXG5cbiAgICBuZ09uSW5pdCgpIHtcbiAgICAgICAvLyBjb25zb2xlLmxvZyh0aGlzLl9mb3JtU2VydmljZS5tb2RlbGVTZWxlY3RlZCk7XG4vL2NvbnNvbGUubG9nKHRoaXMuX2Zvcm1TZXJ2aWNlKTtcbiAgICAgICAgdGhpcy5yZWdpc3RlckZvcm0gPSB0aGlzLl9mYi5ncm91cCh7XG4gICAgICAgICAgICBsYXN0TmFtZTogWycnLCBWYWxpZGF0b3JzLnJlcXVpcmVkXSxcbiAgICAgICAgICAgIHBvc3RfY29kZTogWycnLCBWYWxpZGF0b3JzLnJlcXVpcmVkXSxcbiAgICAgICAgICAgIGVtYWlsOiBbJycsIFZhbGlkYXRvcnMuY29tcG9zZShbXG4gICAgICAgICAgICAgICAgVmFsaWRhdG9ycy5yZXF1aXJlZC8vLFxuICAgICAgICAgICAgICAgIC8vIHRoaXMuaXNFbWFpbFxuICAgICAgICAgICAgXSldLFxuICAgICAgICAgICAgcGhvbmU6IFsnJywgVmFsaWRhdG9ycy5yZXF1aXJlZF1cbiAgICAgICAgfSlcblxuXG4gICAgICAgIC8vIHRoaXMubXlGb3JtID0gdGhpcy5fZmIuZ3JvdXAoe1xuICAgICAgICAvLyAgICAgbmFtZTogWycnLCBWYWxpZGF0b3JzLnJlcXVpcmVkXSxcbiAgICAgICAgLy8gICAgIHBvc3RfY29kZTogWycnLCBWYWxpZGF0b3JzLnJlcXVpcmVkXSxcbiAgICAgICAgLy8gICAgIGVtYWlsOiBbJycsIFZhbGlkYXRvcnMuY29tcG9zZShbXG4gICAgICAgIC8vICAgICAgICAgVmFsaWRhdG9ycy5yZXF1aXJlZC8vLFxuICAgICAgICAvLyAgICAgICAgLy8gdGhpcy5pc0VtYWlsXG4gICAgICAgIC8vICAgICBdKV1cbiAgICAgICAgLy8gfSk7XG4gICAgfVxuXG4gICAgb25TdWJtaXQoKSB7XG4gICAgICAgLy8gY29uc29sZS5sb2codGhpcy5teUZvcm0uZW1haWwpO1xuXG4gICAgICAgIC8vXG4gICAgICAgIC8vIHRoaXMuX2Zvcm1TZXJ2aWNlLmVtYWlsID0gdGhpcy5yZWdpc3RlckZvcm0udmFsdWUuZW1haWw7XG4gICAgICAgIC8vIHRoaXMuX2Zvcm1TZXJ2aWNlLm5hbWUgPSB0aGlzLnJlZ2lzdGVyRm9ybS52YWx1ZS5sYXN0TmFtZTtcbiAgICAgICAgLy8gdGhpcy5fZm9ybVNlcnZpY2UucG9zdF9jb2RlID0gdGhpcy5yZWdpc3RlckZvcm0udmFsdWUucG9zdF9jb2RlO1xuICAgICAgICAvLyB0aGlzLl9mb3JtU2VydmljZS50ZWxlcGhvbmUgPSAgdGhpcy5yZWdpc3RlckZvcm0udmFsdWUucGhvbmU7XG4gICAgICAgIC8vIHRoaXMuX2Zvcm1TZXJ2aWNlLmRhdGVEZW1hbmRlID0gbmV3IERhdGUoKTtcbi8vICAgIGNvbnNvbGUubG9nKHRoaXMuX2Zvcm1TZXJ2aWNlKTtcbiAgICAgICAgdGhpcy5fcHJvZmlsZVNlcnZpY2Uuc2F2ZURlbWFuZCh0aGlzLl9mb3JtU2VydmljZSlcbiAgICAgICAgICAgIC5zdWJzY3JpYmUoXG4gICAgICAgICAgICAgICAgZGF0YSA9PiBjb25zb2xlLmxvZyhkYXRhKSxcbiAgICAgICAgICAgICAgICBlcnJvciA9PiBjb25zb2xlLmxvZyhlcnJvcilcbiAgICAgICAgICAgIClcblxuICAgICAgICAvL2NvbnN0IHByb2ZpbGUgPSBuZXcgRm9ybVByb2ZpbGUodGhpcy5yZWdpc3RlckZvcm0udmFsdWUubGFzdE5hbWU7LCB0dGhpcy5yZWdpc3RlckZvcm0udmFsdWUucG9zdF9jb2RlLCB0aGlzLnJlZ2lzdGVyRm9ybS52YWx1ZS5sYXN0TmFtZTspXG4gICAgICAgIC8vY29uc29sZS5sb2cocHJvZmlsZSk7XG4gICAgfVxuXG5cblxuICAgIC8vIHByaXZhdGUgaXNFbWFpbChjb250cm9sOiBDb250cm9sKToge1tzOiBzdHJpbmddOiBib29sZWFufSB7XG4gICAgLy8gICAgIGlmICghY29udHJvbC52YWx1ZS5tYXRjaChcIlthLXowLTkhIyQlJicqKy89P15fYHt8fX4tXSsoPzpcXC5bYS16MC05ISMkJSYnKisvPT9eX2B7fH1+LV0rKSpAKD86W2EtejAtOV0oPzpbYS16MC05LV0qW2EtejAtOV0pP1xcLikrW2EtejAtOV0oPzpbYS16MC05LV0qW2EtejAtOV0pP1wiKSkge1xuICAgIC8vICAgICAgICAgcmV0dXJuIHtpbnZhbGlkTWFpbDogdHJ1ZX07XG4gICAgLy8gICAgIH1cbiAgICAvLyB9XG59Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
