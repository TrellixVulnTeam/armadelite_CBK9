"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
const core_1 = require('@angular/core');
const form_service_1 = require("./components/form.service");
let AppComponent = class AppComponent {
    constructor(_formService /*,
        private _stepService: StepService*/) {
        this._formService = _formService;
        this.lists = [];
        this.listsData = [];
        this.tmp = [];
    }
    ngOnInit() {
        this._formService.init();
    }
};
AppComponent = __decorate([
    core_1.Component({
        moduleId: module.id,
        selector: 'my-app',
        template: ` 
        <div class="container">          
           <router-outlet
             ></router-outlet></div>          
     ` }), 
    __metadata('design:paramtypes', [form_service_1.FormService])
], AppComponent);
exports.AppComponent = AppComponent;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLHVCQUF3QyxlQUFlLENBQUMsQ0FBQTtBQUN4RCwrQkFBMEIsMkJBQTJCLENBQUMsQ0FBQTtBQVd0RDtJQUVJLFlBQ1ksWUFBeUIsQ0FBQTsyQ0FDRTtRQUQzQixpQkFBWSxHQUFaLFlBQVksQ0FBYTtRQUdyQyxVQUFLLEdBQUcsRUFBRSxDQUFDO1FBQ1gsY0FBUyxHQUFHLEVBQUUsQ0FBQztRQUNmLFFBQUcsR0FBRyxFQUFFLENBQUM7SUFIUCxDQUFDO0lBS0gsUUFBUTtRQUVKLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLENBQUM7SUEwRGhDLENBQUM7QUFBQSxDQUFDO0FBL0VIO0lBQUMsZ0JBQVMsQ0FBQztRQUNQLFFBQVEsRUFBRSxNQUFNLENBQUMsRUFBRTtRQUNuQixRQUFRLEVBQUUsUUFBUTtRQUNsQixRQUFRLEVBQUU7Ozs7TUFJUixFQUFDLENBQUM7O2dCQUFBO0FBRUssb0JBQVksZUFzRXRCLENBQUEiLCJmaWxlIjoiYXBwLmNvbXBvbmVudC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29tcG9uZW50LCBPdXRwdXQsIEluamVjdH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7Rm9ybVNlcnZpY2V9IGZyb20gXCIuL2NvbXBvbmVudHMvZm9ybS5zZXJ2aWNlXCI7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICAgIG1vZHVsZUlkOiBtb2R1bGUuaWQsXHJcbiAgICBzZWxlY3RvcjogJ215LWFwcCcsXHJcbiAgICB0ZW1wbGF0ZTogYCBcclxuICAgICAgICA8ZGl2IGNsYXNzPVwiY29udGFpbmVyXCI+ICAgICAgICAgIFxyXG4gICAgICAgICAgIDxyb3V0ZXItb3V0bGV0XHJcbiAgICAgICAgICAgICA+PC9yb3V0ZXItb3V0bGV0PjwvZGl2PiAgICAgICAgICBcclxuICAgICBgfSlcclxuXHJcbmV4cG9ydCBjbGFzcyBBcHBDb21wb25lbnQge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIHByaXZhdGUgX2Zvcm1TZXJ2aWNlOiBGb3JtU2VydmljZS8qLFxyXG4gICAgICAgIHByaXZhdGUgX3N0ZXBTZXJ2aWNlOiBTdGVwU2VydmljZSovXHJcbiAgICApe31cclxuICAgIGxpc3RzID0gW107XHJcbiAgICBsaXN0c0RhdGEgPSBbXTtcclxuICAgIHRtcCA9IFtdO1xyXG5cclxuICAgIG5nT25Jbml0KCkge1xyXG5cclxuICAgICAgICB0aGlzLl9mb3JtU2VydmljZS5pbml0KCk7XHJcbjw8PDw8PDwgSEVBRFxyXG5cclxuPT09PT09PVxyXG4vLyAgICAgICAgIGNvbnNvbGUgICAubG9nKCdhcCAgICAgICAgICAgICAgICAgICAgICAgICAgcENvbXBvICAgICAgICAgICAgICAgIG5lbnQnKTtcclxuLy8gICAgICAgICB0aCAgICAgIGlzLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnAgICAgICAgICAgIG0gICAgICAgICAgICAgICAgICAgICAgICBGb3IgQWR1bHRzX3MgICAgICAgICAgICAgICAgICAgICAgICAgdGUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwICAgICAgU2VydiAgaWNlLmdldFN0ZXBzKClcclxuLy8gICAgICAgICAgICAgLnN1YnNjcmkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlKFxyXG4vLyAgICAgICAgICAgICAgICAgc3RlcFJldHVybiAgICAgICAgICAgICAgPSAgICAgPiB7XHJcbi8vXHJcblxyXG4vLyAgICAgICAgICAgICAgICAgICAgIC8vICAgICAgdCAgICAgaGlzLiAgICAgICAgICAgICAgICBzdCAgIGVwcyA9IHN0ZXBSZXR1cm47XHJcbi8vXHJcbi8vXHJcbi8vXHJcbi8vICAgICAgICAgICAgICAgICAgICAgY29uc29sZSAubG9nKFwic3RlcFJldHUgICAgcm5cIik7XHJcbi8vICAgICAgICAgICAgICAgICAgICAgY29uc28gICAgICBsZS4gIGxvZyhzdCBlcFJldHVybik7XHJcbi8vICAgICAgICAgICAgICAgICAgICAgY29uc29sZSAgICAgICAubG8gZyh0aGlzLl9zdGVwU2VydmljZS5zdGVwcyk7XHJcbi8vICAgICAgICAgICAgICAgICAgICAgLy8gdGhpcy50bXAgPSBzdGVwIFJldHVybi5qc29uKCk7XHJcbi8vICAgICAgICAgICAgICAgICAgICAgLy8gdGhpICAgICBzLl9zdGVwU2VydmljZS5zdGVwID0gdGhpcy50bXA7XHJcbi8vICAgICAgICAgICAgICAgICAgICAgLy9cclxuLy8gICAgICAgICAgICAgICAgICAgICAvLyAvLyAgICAgICAgICAgICAgICBmb3IgKCBsZXQgaSA9ICAgIDA7IGkgPCBzdGVwUmV0dXJuLmpzb24oKS4gbGVuZ3RoOyBpKyspIHtcclxuLy8gICAgICAgICAgICAgICAgICAgICAvLyAvLyAgICAgY29uc29sZSAuICBsb2coc3RlcCAgIFJldHVybi5qc29uKClbICBpXSk7XHJcbi8vICAgICAgICAgICAgICAgICAgICAgLy8gLy9cclxuLy8gICAgICAgICAgICAgICAgICAgICAvLyAvLyAgICAgYyAgICAgb25zb2xlLmxvICBnKHRoaXMuX3N0ICBlcCAgIHYgICBTZXJ2aWNlLnN0ZXApO1xyXG4vLyAgICAgICAgICAgICAgICAgICAgIC8vIC8vIH1cclxuLy8gICAgICAgICAgICAgICAgICAgICAvL1xyXG4vLyAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHRoaXMuICAgIF9zdGVwU2VydmljZS5zdGVwWzBdKTtcclxuLy8gICAgICAgICAgICAgICAgICAgICAvL1xyXG4vLyAgICAgICAgICAgICAgICAgICAgIC8vIHRoaXMuX3N0ZXBTZXJ2aWNlLnN0ZXBzID0gdGhpcy50bXA7XHJcbi8vICAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS4gICAgIGxvZyh0aGlzLl9zdGVwU2VydmljZS5zdGVwcyk7XHJcbi8vICAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2codGhpcy50bXApO1xyXG4vLyAgICAgICAgICAgICAgICAgICAgIC8qIElGIERBVEEgQVJFIFNUT1JFRCBJTiBBIENPTExFQ1RJT04gSU4gQ09ORklHIEZJTEUgKi9cclxuLy8gICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRoaXMuX3N0ZXBTZXJ2aWNlLnN0ZXBzWzBdLmNvbmZpZ3UgICAgICAgcmF0aW9uLmNvbGxlY3Rpb24gIT0gJ3VuZGVmaW5lZCcpIHtcclxuLy8gICAgICAgICAgICAgICAgICAgICB9XHJcbi8vXHJcbi8vICAgICAgICAgICAgICAgICAgICAgLyogIElGIEEgTElTVCBFWElTVFMgSU4gQ09ORklHIEZJTEUgKi9cclxuLy8gICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mICAgICAgICB0aGlzLl9zdGVwU2VydmljZS5zdGVwc1swXS5jb25maWd1cmF0aW9uLmxpc3QgIT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubGlzdHMucHVzaCh0aGlzLl9zdGVwU2VydmljZS5zdGVwc1swXS5jb25maWd1cmF0aW9uLmxpc3QpO1xyXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubGlzdHNEYSAgIHRhLnB1c2goe1xyXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IHRoaXMuX3N0ZXBTZXJ2aWNlLnN0ZXBzWzBdLm5hbWUsXHJcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImxpc3RcIjogdGhpcy5fc3RlcFNlciAgICAgICAgdmljZS5zdGVwc1swXS5jb25maWd1cmF0aW9uLmxpc3RcclxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbi8vICAgICAgICAgICAgICAgICAgICAgfVxyXG4vLyAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHRoaXMubGlzdHNEYXRhKTtcclxuLy8gICAgICAgICAgICAgICAgICAgICB0aGlzLl9zdGVwU2VydmljZS5kYXRhcyA9IHRoaXMubGlzdHNEYXRhLnNsaWNlKCk7XHJcbi8vICAgICAgICAgICAgICAgICAgICAgLy8gSU5JVElBVEUgRk9STSBTRVJWSUNFIFRPIEtFRVAgQUxMIFNFTEVDVElPTlMgTUFERSBCWSBVU0VSIElOIFNURVBTXHJcbi8vICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZm9ybVNlcnZpICAgICAgICAgIGNlLmluaXQoKTtcclxuLy9cclxuLy8gLy9jb25zb2xlLiAgbG9nKHRoaXMuX2Zvcm1TICAgICAgZXJ2aWNlKTtcclxuLy8gLy9CaWcgbGlzdCBjb250YWlucyBhbGwgbGlzdCBvZiBidXR0b25zXHJcbi8vIC8vdmFyIGtleU5hbWUgPSB0aGlzLl9zdGVwU2VydmljZS5zICAgICAgICBlcFswXS5jb25maWd1cmF0aW9uLmZvcm1fdmFsdWUubmFtZTtcclxuLy8gLy90aGlzLl9mb3JtU2VydmljZS5hcnJheVN0ZXBzWzBdW2tleU5hbWVdID0gIHRoaXMucm91dGUuc25hcHNob3QucGFyYW1zLm5hbWU7XHJcbi8vIC8vdGhpcy5sYWJlbFBhbmVsID0gdGhpcy5fc3RlcFNlcnZpY2Uuc3RlcFt0aGlzLmluZGV4U3RlcE9ial0uY29uZmlndXJhdGlvbi5sYWJlbFBhbmVsO1xyXG4vLyAgICAgICAgICAgICAgICAgfSAsXHJcbi8vICAgICAgICAgICAgICAgICBlcnJvciA9PiBjb25zb2xlLmxvZyhlcnJvcilcclxuLy8gICAgICAgICAgICAgKTtcclxuLy8gICAgIH1cclxuPj4+Pj4+PiB0YXNrXzE1XHJcbiB9fSJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
