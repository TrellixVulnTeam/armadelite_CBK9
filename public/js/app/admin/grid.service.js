"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@angular/core");
const global_1 = require("../global");
const http_1 = require("@angular/http");
const Observable_1 = require("rxjs/Observable");
let GridPanelService = class GridPanelService {
    constructor(_http) {
        this._http = _http;
        this.dataGrid = [];
        this.keysName = [];
        this.colTitle = [];
        this.keysName_details = [];
        this.colTitle_details = [];
        this.config = { "export": false, "export_id": 0, "details_activated": false, "group": false };
        this.originalData = this.dataGrid;
    }
    getDatas(grid_name, valeur) {
        this.keysName = [];
        this.colTitle = [];
        let query = "grid_name=" + grid_name + "&filter=" + valeur;
        let completeUrl = global_1.GlobalVariable.BASE_URL + 'data_grid?' + query;
        return this._http.get(completeUrl)
            .map(response => {
            let data = response.json();
            this.config = data[0];
            console.log(this.config);
            console.log(this.config.group);
            console.log(this.config.details_activated);
            for (var i in data[0].config) {
                var result = "";
                if (typeof data[0].config[i].field_panel_name != 'undefined') {
                    for (var q in data[0].config[i].field_panel_values) {
                        this.keysName.push(data[0].config[i].field_panel_name + '_' + data[0].config[i].field_panel_values[q].data);
                        let objColTitle = { title: '', key: '', type: '', filterable: false, filter_type: "text", data_combo: [] };
                        objColTitle.title = data[0].config[i].field_panel_values[q].title;
                        objColTitle.key = data[0].config[i].field_panel_name + '_' + data[0].config[i].field_panel_values[q].data;
                        objColTitle.type = "field_panel";
                        if (typeof (data[0].config[i].field_panel_values[q].filterable) != 'undefined') {
                            objColTitle.filterable = true;
                            if (typeof (data[0].config[i].field_panel_values[q].filter_type) != 'undefined') {
                                objColTitle.filter_type = data[0].config[i].field_panel_values[q].filter_type;
                            }
                        }
                        this.colTitle.push(objColTitle);
                    }
                }
                else if (typeof data[0].config[i].type != 'undefined') {
                    switch (data[0].config[i].type) {
                        case 'checkbox': {
                            this.keysName.push(data[0].config[i].data);
                            this.colTitle.push({ "title": data[0].config[i].title, "key": data[0].config[i].data, "type": "checkbox" });
                            break;
                        }
                        case 'combo': {
                            this.keysName.push(data[0].config[i].data);
                            this.colTitle.push({
                                "title": data[0].config[i].title,
                                "key": data[0].config[i].data,
                                "type": "combo"
                            });
                            break;
                        }
                    }
                }
                else {
                    let keyName = data[0].config[i].data;
                    this.keysName.push(keyName);
                    if (typeof (data[0].config[i].filterable) != 'undefined') {
                        let filter_type = 'text';
                        let data_combo = [" ALL"];
                        if (typeof (data[0].config[i].filter_type) != 'undefined' || data[0].config[i].filter_type == 'combo') {
                            filter_type = data[0].config[i].filter_type;
                            let x = 0;
                            for (let filterValue of data) {
                                if (x == 0) {
                                    x++;
                                }
                                else {
                                    if (data_combo.indexOf(filterValue[keyName]) == -1) {
                                        data_combo.push(filterValue[keyName]);
                                    }
                                }
                            }
                            data_combo.sort();
                        }
                        this.colTitle.push({
                            "title": data[0].config[i].title,
                            "key": data[0].config[i].data,
                            "type": "standard",
                            "filterable": true,
                            "filter_type": filter_type,
                            "data_combo": data_combo
                        });
                    }
                    else {
                        this.colTitle.push({
                            "title": data[0].config[i].title,
                            "key": data[0].config[i].data,
                            "type": "standard",
                            "filterable": false
                        });
                    }
                }
            }
            for (let i in data[0].config_details) {
                switch (data[0].config_details[i].type) {
                    case 'file_details': {
                        this.keysName_details.push(data[0].config_details[i].file_name);
                        this.colTitle_details.push({
                            "title": data[0].config_details[i].label,
                            "key": data[0].config_details[i].file_name,
                            "type": "file"
                        });
                        break;
                    }
                    case 'field': {
                        this.keysName_details.push(data[0].config_details[i].data);
                        this.colTitle_details.push({
                            "title": data[0].config_details[i].label,
                            "key": data[0].config_details[i].data,
                            "type": "field",
                            "editable": data[0].config_details[i].editable
                        });
                    }
                }
            }
            data.shift();
            this.dataGrid = data;
            this.originalData = this.dataGrid;
            return 'ok';
        })
            .catch(error => Observable_1.Observable.throw(error));
    }
    getActivatedGrids(master_name) {
        let body = JSON.stringify({ "master": master_name });
        const headers = new http_1.Headers({ 'Content-Type': 'application/json' });
        var completeUrl = global_1.GlobalVariable.BASE_URL + 'get_grids';
        return this._http.post(completeUrl, body, { headers: headers })
            .toPromise().then(response => response.json())
            .catch(error => Observable_1.Observable.throw(error.json()));
    }
    filterParNom(obj, arg) {
        let key = this.key;
        let value = this.value;
        if (obj[key].toUpperCase().substr(0, value.length) == value.toUpperCase()) {
            return true;
        }
        return false;
    }
    filterData(value, key) {
        this.dataGrid = this.originalData;
        if (value != ' ALL') {
            let result = this.dataGrid.filter(this.filterParNom, { "key": key, "value": value });
            if (result.length > 0) {
                this.dataGrid = result;
            }
        }
    }
    updateCheckbox(value, _id, master, app_name, field_name) {
        let body = JSON.stringify({ "value": value, "_id": _id, "master": master, "appName": app_name, "field_name": field_name });
        const headers = new http_1.Headers({ 'Content-Type': 'application/json' });
        var completeUrl = global_1.GlobalVariable.BASE_URL + 'update_checkbox';
        return this._http.post(completeUrl, body, { headers: headers })
            .map(response => response)
            .catch(error => Observable_1.Observable.throw(error.json()));
    }
    changeCourse(course_type, user_id) {
        console.log(course_type);
        console.log(user_id);
        let body = JSON.stringify({ "course_type": course_type, "_id": user_id });
        const headers = new http_1.Headers({ 'Content-Type': 'application/json' });
        var completeUrl = global_1.GlobalVariable.BASE_URL + 'update_course_type';
        return this._http.post(completeUrl, body, { headers: headers })
            .map(response => response)
            .catch(error => Observable_1.Observable.throw(error.json()));
    }
};
GridPanelService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [http_1.Http])
], GridPanelService);
exports.GridPanelService = GridPanelService;

//# sourceMappingURL=data:application/json;base64,
